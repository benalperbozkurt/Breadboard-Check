
breadboardFirst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009064  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080091ec  080091ec  0000a1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009208  08009208  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009210  08009210  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009214  08009214  0000a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009218  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a75  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003864  00000000  00000000  0001fb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00023388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  000244b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002350e  00000000  00000000  000251cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa76  00000000  00000000  000486da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb97d  00000000  00000000  00063150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012eacd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a78  00000000  00000000  0012eb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00133588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080091d4 	.word	0x080091d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080091d4 	.word	0x080091d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 ff9b 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 fbb1 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fcad 	bl	8000e24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ca:	f000 fc17 	bl	8000cfc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004ce:	f000 fc43 	bl	8000d58 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d2:	f000 fc71 	bl	8000db8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d6:	f008 fa27 	bl	8008928 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 int i=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]

  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004de:	f008 fa49 	bl	8008974 <MX_USB_HOST_Process>

	for(i=0;i<10;i++){
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e1c8      	b.n	800087a <main+0x3c2>
		HAL_Delay(250);
 80004e8:	20fa      	movs	r0, #250	@ 0xfa
 80004ea:	f000 fff7 	bl	80014dc <HAL_Delay>
		 if(i==0){
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d129      	bne.n	8000548 <main+0x90>
			  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2180      	movs	r1, #128	@ 0x80
 80004f8:	48c7      	ldr	r0, [pc, #796]	@ (8000818 <main+0x360>)
 80004fa:	f001 fac1 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000504:	48c4      	ldr	r0, [pc, #784]	@ (8000818 <main+0x360>)
 8000506:	f001 fabb 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000510:	48c1      	ldr	r0, [pc, #772]	@ (8000818 <main+0x360>)
 8000512:	f001 fab5 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800051c:	48be      	ldr	r0, [pc, #760]	@ (8000818 <main+0x360>)
 800051e:	f001 faaf 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000528:	48bb      	ldr	r0, [pc, #748]	@ (8000818 <main+0x360>)
 800052a:	f001 faa9 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000534:	48b8      	ldr	r0, [pc, #736]	@ (8000818 <main+0x360>)
 8000536:	f001 faa3 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000540:	48b5      	ldr	r0, [pc, #724]	@ (8000818 <main+0x360>)
 8000542:	f001 fa9d 	bl	8001a80 <HAL_GPIO_WritePin>
 8000546:	e195      	b.n	8000874 <main+0x3bc>
		  }
		  else if(i==1){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d129      	bne.n	80005a2 <main+0xea>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2180      	movs	r1, #128	@ 0x80
 8000552:	48b1      	ldr	r0, [pc, #708]	@ (8000818 <main+0x360>)
 8000554:	f001 fa94 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055e:	48ae      	ldr	r0, [pc, #696]	@ (8000818 <main+0x360>)
 8000560:	f001 fa8e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800056a:	48ab      	ldr	r0, [pc, #684]	@ (8000818 <main+0x360>)
 800056c:	f001 fa88 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000576:	48a8      	ldr	r0, [pc, #672]	@ (8000818 <main+0x360>)
 8000578:	f001 fa82 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000582:	48a5      	ldr	r0, [pc, #660]	@ (8000818 <main+0x360>)
 8000584:	f001 fa7c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058e:	48a2      	ldr	r0, [pc, #648]	@ (8000818 <main+0x360>)
 8000590:	f001 fa76 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	489f      	ldr	r0, [pc, #636]	@ (8000818 <main+0x360>)
 800059c:	f001 fa70 	bl	8001a80 <HAL_GPIO_WritePin>
 80005a0:	e168      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==2){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d129      	bne.n	80005fc <main+0x144>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	489a      	ldr	r0, [pc, #616]	@ (8000818 <main+0x360>)
 80005ae:	f001 fa67 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b8:	4897      	ldr	r0, [pc, #604]	@ (8000818 <main+0x360>)
 80005ba:	f001 fa61 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c4:	4894      	ldr	r0, [pc, #592]	@ (8000818 <main+0x360>)
 80005c6:	f001 fa5b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d0:	4891      	ldr	r0, [pc, #580]	@ (8000818 <main+0x360>)
 80005d2:	f001 fa55 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005dc:	488e      	ldr	r0, [pc, #568]	@ (8000818 <main+0x360>)
 80005de:	f001 fa4f 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e8:	488b      	ldr	r0, [pc, #556]	@ (8000818 <main+0x360>)
 80005ea:	f001 fa49 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f4:	4888      	ldr	r0, [pc, #544]	@ (8000818 <main+0x360>)
 80005f6:	f001 fa43 	bl	8001a80 <HAL_GPIO_WritePin>
 80005fa:	e13b      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==3){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d129      	bne.n	8000656 <main+0x19e>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	4884      	ldr	r0, [pc, #528]	@ (8000818 <main+0x360>)
 8000608:	f001 fa3a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000612:	4881      	ldr	r0, [pc, #516]	@ (8000818 <main+0x360>)
 8000614:	f001 fa34 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800061e:	487e      	ldr	r0, [pc, #504]	@ (8000818 <main+0x360>)
 8000620:	f001 fa2e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062a:	487b      	ldr	r0, [pc, #492]	@ (8000818 <main+0x360>)
 800062c:	f001 fa28 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000636:	4878      	ldr	r0, [pc, #480]	@ (8000818 <main+0x360>)
 8000638:	f001 fa22 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000642:	4875      	ldr	r0, [pc, #468]	@ (8000818 <main+0x360>)
 8000644:	f001 fa1c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064e:	4872      	ldr	r0, [pc, #456]	@ (8000818 <main+0x360>)
 8000650:	f001 fa16 	bl	8001a80 <HAL_GPIO_WritePin>
 8000654:	e10e      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==4){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d129      	bne.n	80006b0 <main+0x1f8>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	486d      	ldr	r0, [pc, #436]	@ (8000818 <main+0x360>)
 8000662:	f001 fa0d 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800066c:	486a      	ldr	r0, [pc, #424]	@ (8000818 <main+0x360>)
 800066e:	f001 fa07 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000678:	4867      	ldr	r0, [pc, #412]	@ (8000818 <main+0x360>)
 800067a:	f001 fa01 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000684:	4864      	ldr	r0, [pc, #400]	@ (8000818 <main+0x360>)
 8000686:	f001 f9fb 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000690:	4861      	ldr	r0, [pc, #388]	@ (8000818 <main+0x360>)
 8000692:	f001 f9f5 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069c:	485e      	ldr	r0, [pc, #376]	@ (8000818 <main+0x360>)
 800069e:	f001 f9ef 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a8:	485b      	ldr	r0, [pc, #364]	@ (8000818 <main+0x360>)
 80006aa:	f001 f9e9 	bl	8001a80 <HAL_GPIO_WritePin>
 80006ae:	e0e1      	b.n	8000874 <main+0x3bc>
		    }
		  else  if(i==5){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b05      	cmp	r3, #5
 80006b4:	d129      	bne.n	800070a <main+0x252>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	4857      	ldr	r0, [pc, #348]	@ (8000818 <main+0x360>)
 80006bc:	f001 f9e0 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c6:	4854      	ldr	r0, [pc, #336]	@ (8000818 <main+0x360>)
 80006c8:	f001 f9da 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d2:	4851      	ldr	r0, [pc, #324]	@ (8000818 <main+0x360>)
 80006d4:	f001 f9d4 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006de:	484e      	ldr	r0, [pc, #312]	@ (8000818 <main+0x360>)
 80006e0:	f001 f9ce 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ea:	484b      	ldr	r0, [pc, #300]	@ (8000818 <main+0x360>)
 80006ec:	f001 f9c8 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	4848      	ldr	r0, [pc, #288]	@ (8000818 <main+0x360>)
 80006f8:	f001 f9c2 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000702:	4845      	ldr	r0, [pc, #276]	@ (8000818 <main+0x360>)
 8000704:	f001 f9bc 	bl	8001a80 <HAL_GPIO_WritePin>
 8000708:	e0b4      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==6){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b06      	cmp	r3, #6
 800070e:	d129      	bne.n	8000764 <main+0x2ac>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	@ 0x80
 8000714:	4840      	ldr	r0, [pc, #256]	@ (8000818 <main+0x360>)
 8000716:	f001 f9b3 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000720:	483d      	ldr	r0, [pc, #244]	@ (8000818 <main+0x360>)
 8000722:	f001 f9ad 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072c:	483a      	ldr	r0, [pc, #232]	@ (8000818 <main+0x360>)
 800072e:	f001 f9a7 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000738:	4837      	ldr	r0, [pc, #220]	@ (8000818 <main+0x360>)
 800073a:	f001 f9a1 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000744:	4834      	ldr	r0, [pc, #208]	@ (8000818 <main+0x360>)
 8000746:	f001 f99b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000750:	4831      	ldr	r0, [pc, #196]	@ (8000818 <main+0x360>)
 8000752:	f001 f995 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	482e      	ldr	r0, [pc, #184]	@ (8000818 <main+0x360>)
 800075e:	f001 f98f 	bl	8001a80 <HAL_GPIO_WritePin>
 8000762:	e087      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==7){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b07      	cmp	r3, #7
 8000768:	d129      	bne.n	80007be <main+0x306>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	482a      	ldr	r0, [pc, #168]	@ (8000818 <main+0x360>)
 8000770:	f001 f986 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077a:	4827      	ldr	r0, [pc, #156]	@ (8000818 <main+0x360>)
 800077c:	f001 f980 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000786:	4824      	ldr	r0, [pc, #144]	@ (8000818 <main+0x360>)
 8000788:	f001 f97a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000792:	4821      	ldr	r0, [pc, #132]	@ (8000818 <main+0x360>)
 8000794:	f001 f974 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <main+0x360>)
 80007a0:	f001 f96e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007aa:	481b      	ldr	r0, [pc, #108]	@ (8000818 <main+0x360>)
 80007ac:	f001 f968 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b6:	4818      	ldr	r0, [pc, #96]	@ (8000818 <main+0x360>)
 80007b8:	f001 f962 	bl	8001a80 <HAL_GPIO_WritePin>
 80007bc:	e05a      	b.n	8000874 <main+0x3bc>
		    }
		  else if(i==8){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b08      	cmp	r3, #8
 80007c2:	d12b      	bne.n	800081c <main+0x364>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <main+0x360>)
 80007ca:	f001 f959 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <main+0x360>)
 80007d6:	f001 f953 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e0:	480d      	ldr	r0, [pc, #52]	@ (8000818 <main+0x360>)
 80007e2:	f001 f94d 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <main+0x360>)
 80007ee:	f001 f947 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f8:	4807      	ldr	r0, [pc, #28]	@ (8000818 <main+0x360>)
 80007fa:	f001 f941 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <main+0x360>)
 8000806:	f001 f93b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000810:	4801      	ldr	r0, [pc, #4]	@ (8000818 <main+0x360>)
 8000812:	f001 f935 	bl	8001a80 <HAL_GPIO_WritePin>
 8000816:	e02d      	b.n	8000874 <main+0x3bc>
 8000818:	40021000 	.word	0x40021000
		    }
		  else if(i==9){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b09      	cmp	r3, #9
 8000820:	d128      	bne.n	8000874 <main+0x3bc>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	48b7      	ldr	r0, [pc, #732]	@ (8000b04 <main+0x64c>)
 8000828:	f001 f92a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000832:	48b4      	ldr	r0, [pc, #720]	@ (8000b04 <main+0x64c>)
 8000834:	f001 f924 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083e:	48b1      	ldr	r0, [pc, #708]	@ (8000b04 <main+0x64c>)
 8000840:	f001 f91e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	48ae      	ldr	r0, [pc, #696]	@ (8000b04 <main+0x64c>)
 800084c:	f001 f918 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000856:	48ab      	ldr	r0, [pc, #684]	@ (8000b04 <main+0x64c>)
 8000858:	f001 f912 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000862:	48a8      	ldr	r0, [pc, #672]	@ (8000b04 <main+0x64c>)
 8000864:	f001 f90c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086e:	48a5      	ldr	r0, [pc, #660]	@ (8000b04 <main+0x64c>)
 8000870:	f001 f906 	bl	8001a80 <HAL_GPIO_WritePin>
	for(i=0;i<10;i++){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b09      	cmp	r3, #9
 800087e:	f77f ae33 	ble.w	80004e8 <main+0x30>
		    }
	}

	for(i=9;i>=0;i--){
 8000882:	2309      	movs	r3, #9
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e1c8      	b.n	8000c1a <main+0x762>
		HAL_Delay(250);
 8000888:	20fa      	movs	r0, #250	@ 0xfa
 800088a:	f000 fe27 	bl	80014dc <HAL_Delay>
		 if(i==0){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <main+0x430>
			  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	489a      	ldr	r0, [pc, #616]	@ (8000b04 <main+0x64c>)
 800089a:	f001 f8f1 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a4:	4897      	ldr	r0, [pc, #604]	@ (8000b04 <main+0x64c>)
 80008a6:	f001 f8eb 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b0:	4894      	ldr	r0, [pc, #592]	@ (8000b04 <main+0x64c>)
 80008b2:	f001 f8e5 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008bc:	4891      	ldr	r0, [pc, #580]	@ (8000b04 <main+0x64c>)
 80008be:	f001 f8df 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c8:	488e      	ldr	r0, [pc, #568]	@ (8000b04 <main+0x64c>)
 80008ca:	f001 f8d9 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	488b      	ldr	r0, [pc, #556]	@ (8000b04 <main+0x64c>)
 80008d6:	f001 f8d3 	bl	8001a80 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e0:	4888      	ldr	r0, [pc, #544]	@ (8000b04 <main+0x64c>)
 80008e2:	f001 f8cd 	bl	8001a80 <HAL_GPIO_WritePin>
 80008e6:	e195      	b.n	8000c14 <main+0x75c>
		  }
		  else if(i==1){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d129      	bne.n	8000942 <main+0x48a>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	4884      	ldr	r0, [pc, #528]	@ (8000b04 <main+0x64c>)
 80008f4:	f001 f8c4 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fe:	4881      	ldr	r0, [pc, #516]	@ (8000b04 <main+0x64c>)
 8000900:	f001 f8be 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800090a:	487e      	ldr	r0, [pc, #504]	@ (8000b04 <main+0x64c>)
 800090c:	f001 f8b8 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000916:	487b      	ldr	r0, [pc, #492]	@ (8000b04 <main+0x64c>)
 8000918:	f001 f8b2 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000922:	4878      	ldr	r0, [pc, #480]	@ (8000b04 <main+0x64c>)
 8000924:	f001 f8ac 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092e:	4875      	ldr	r0, [pc, #468]	@ (8000b04 <main+0x64c>)
 8000930:	f001 f8a6 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093a:	4872      	ldr	r0, [pc, #456]	@ (8000b04 <main+0x64c>)
 800093c:	f001 f8a0 	bl	8001a80 <HAL_GPIO_WritePin>
 8000940:	e168      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==2){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d129      	bne.n	800099c <main+0x4e4>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	486d      	ldr	r0, [pc, #436]	@ (8000b04 <main+0x64c>)
 800094e:	f001 f897 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000958:	486a      	ldr	r0, [pc, #424]	@ (8000b04 <main+0x64c>)
 800095a:	f001 f891 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000964:	4867      	ldr	r0, [pc, #412]	@ (8000b04 <main+0x64c>)
 8000966:	f001 f88b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000970:	4864      	ldr	r0, [pc, #400]	@ (8000b04 <main+0x64c>)
 8000972:	f001 f885 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097c:	4861      	ldr	r0, [pc, #388]	@ (8000b04 <main+0x64c>)
 800097e:	f001 f87f 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000988:	485e      	ldr	r0, [pc, #376]	@ (8000b04 <main+0x64c>)
 800098a:	f001 f879 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000994:	485b      	ldr	r0, [pc, #364]	@ (8000b04 <main+0x64c>)
 8000996:	f001 f873 	bl	8001a80 <HAL_GPIO_WritePin>
 800099a:	e13b      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==3){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d129      	bne.n	80009f6 <main+0x53e>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2180      	movs	r1, #128	@ 0x80
 80009a6:	4857      	ldr	r0, [pc, #348]	@ (8000b04 <main+0x64c>)
 80009a8:	f001 f86a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b2:	4854      	ldr	r0, [pc, #336]	@ (8000b04 <main+0x64c>)
 80009b4:	f001 f864 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009be:	4851      	ldr	r0, [pc, #324]	@ (8000b04 <main+0x64c>)
 80009c0:	f001 f85e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ca:	484e      	ldr	r0, [pc, #312]	@ (8000b04 <main+0x64c>)
 80009cc:	f001 f858 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d6:	484b      	ldr	r0, [pc, #300]	@ (8000b04 <main+0x64c>)
 80009d8:	f001 f852 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e2:	4848      	ldr	r0, [pc, #288]	@ (8000b04 <main+0x64c>)
 80009e4:	f001 f84c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4845      	ldr	r0, [pc, #276]	@ (8000b04 <main+0x64c>)
 80009f0:	f001 f846 	bl	8001a80 <HAL_GPIO_WritePin>
 80009f4:	e10e      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==4){
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d129      	bne.n	8000a50 <main+0x598>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2180      	movs	r1, #128	@ 0x80
 8000a00:	4840      	ldr	r0, [pc, #256]	@ (8000b04 <main+0x64c>)
 8000a02:	f001 f83d 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	483d      	ldr	r0, [pc, #244]	@ (8000b04 <main+0x64c>)
 8000a0e:	f001 f837 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a18:	483a      	ldr	r0, [pc, #232]	@ (8000b04 <main+0x64c>)
 8000a1a:	f001 f831 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a24:	4837      	ldr	r0, [pc, #220]	@ (8000b04 <main+0x64c>)
 8000a26:	f001 f82b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a30:	4834      	ldr	r0, [pc, #208]	@ (8000b04 <main+0x64c>)
 8000a32:	f001 f825 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3c:	4831      	ldr	r0, [pc, #196]	@ (8000b04 <main+0x64c>)
 8000a3e:	f001 f81f 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a48:	482e      	ldr	r0, [pc, #184]	@ (8000b04 <main+0x64c>)
 8000a4a:	f001 f819 	bl	8001a80 <HAL_GPIO_WritePin>
 8000a4e:	e0e1      	b.n	8000c14 <main+0x75c>
		    }
		  else  if(i==5){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d129      	bne.n	8000aaa <main+0x5f2>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	482a      	ldr	r0, [pc, #168]	@ (8000b04 <main+0x64c>)
 8000a5c:	f001 f810 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a66:	4827      	ldr	r0, [pc, #156]	@ (8000b04 <main+0x64c>)
 8000a68:	f001 f80a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a72:	4824      	ldr	r0, [pc, #144]	@ (8000b04 <main+0x64c>)
 8000a74:	f001 f804 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a7e:	4821      	ldr	r0, [pc, #132]	@ (8000b04 <main+0x64c>)
 8000a80:	f000 fffe 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a8a:	481e      	ldr	r0, [pc, #120]	@ (8000b04 <main+0x64c>)
 8000a8c:	f000 fff8 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a96:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <main+0x64c>)
 8000a98:	f000 fff2 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa2:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <main+0x64c>)
 8000aa4:	f000 ffec 	bl	8001a80 <HAL_GPIO_WritePin>
 8000aa8:	e0b4      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==6){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b06      	cmp	r3, #6
 8000aae:	d12b      	bne.n	8000b08 <main+0x650>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <main+0x64c>)
 8000ab6:	f000 ffe3 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac0:	4810      	ldr	r0, [pc, #64]	@ (8000b04 <main+0x64c>)
 8000ac2:	f000 ffdd 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	480d      	ldr	r0, [pc, #52]	@ (8000b04 <main+0x64c>)
 8000ace:	f000 ffd7 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad8:	480a      	ldr	r0, [pc, #40]	@ (8000b04 <main+0x64c>)
 8000ada:	f000 ffd1 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <main+0x64c>)
 8000ae6:	f000 ffcb 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <main+0x64c>)
 8000af2:	f000 ffc5 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afc:	4801      	ldr	r0, [pc, #4]	@ (8000b04 <main+0x64c>)
 8000afe:	f000 ffbf 	bl	8001a80 <HAL_GPIO_WritePin>
 8000b02:	e087      	b.n	8000c14 <main+0x75c>
 8000b04:	40021000 	.word	0x40021000
		    }
		  else if(i==7){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d129      	bne.n	8000b62 <main+0x6aa>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	4844      	ldr	r0, [pc, #272]	@ (8000c24 <main+0x76c>)
 8000b14:	f000 ffb4 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1e:	4841      	ldr	r0, [pc, #260]	@ (8000c24 <main+0x76c>)
 8000b20:	f000 ffae 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b2a:	483e      	ldr	r0, [pc, #248]	@ (8000c24 <main+0x76c>)
 8000b2c:	f000 ffa8 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b36:	483b      	ldr	r0, [pc, #236]	@ (8000c24 <main+0x76c>)
 8000b38:	f000 ffa2 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b42:	4838      	ldr	r0, [pc, #224]	@ (8000c24 <main+0x76c>)
 8000b44:	f000 ff9c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b4e:	4835      	ldr	r0, [pc, #212]	@ (8000c24 <main+0x76c>)
 8000b50:	f000 ff96 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5a:	4832      	ldr	r0, [pc, #200]	@ (8000c24 <main+0x76c>)
 8000b5c:	f000 ff90 	bl	8001a80 <HAL_GPIO_WritePin>
 8000b60:	e058      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==8){
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d129      	bne.n	8000bbc <main+0x704>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	482d      	ldr	r0, [pc, #180]	@ (8000c24 <main+0x76c>)
 8000b6e:	f000 ff87 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b78:	482a      	ldr	r0, [pc, #168]	@ (8000c24 <main+0x76c>)
 8000b7a:	f000 ff81 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b84:	4827      	ldr	r0, [pc, #156]	@ (8000c24 <main+0x76c>)
 8000b86:	f000 ff7b 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b90:	4824      	ldr	r0, [pc, #144]	@ (8000c24 <main+0x76c>)
 8000b92:	f000 ff75 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b9c:	4821      	ldr	r0, [pc, #132]	@ (8000c24 <main+0x76c>)
 8000b9e:	f000 ff6f 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ba8:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <main+0x76c>)
 8000baa:	f000 ff69 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <main+0x76c>)
 8000bb6:	f000 ff63 	bl	8001a80 <HAL_GPIO_WritePin>
 8000bba:	e02b      	b.n	8000c14 <main+0x75c>
		    }
		  else if(i==9){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d128      	bne.n	8000c14 <main+0x75c>
		  	  HAL_GPIO_WritePin(pin1_GPIO_Port, pin1_Pin, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	4817      	ldr	r0, [pc, #92]	@ (8000c24 <main+0x76c>)
 8000bc8:	f000 ff5a 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin2_GPIO_Port, pin2_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <main+0x76c>)
 8000bd4:	f000 ff54 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin3_GPIO_Port, pin3_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <main+0x76c>)
 8000be0:	f000 ff4e 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin4_GPIO_Port, pin4_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <main+0x76c>)
 8000bec:	f000 ff48 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin5_GPIO_Port, pin5_Pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bf6:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <main+0x76c>)
 8000bf8:	f000 ff42 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin6_GPIO_Port, pin6_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c02:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <main+0x76c>)
 8000c04:	f000 ff3c 	bl	8001a80 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(pin7_GPIO_Port, pin7_Pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <main+0x76c>)
 8000c10:	f000 ff36 	bl	8001a80 <HAL_GPIO_WritePin>
	for(i=9;i>=0;i--){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f6bf ae33 	bge.w	8000888 <main+0x3d0>
    MX_USB_HOST_Process();
 8000c22:	e45c      	b.n	80004de <main+0x26>
 8000c24:	40021000 	.word	0x40021000

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	@ 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f008 fa3e 	bl	80090b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a27      	ldr	r2, [pc, #156]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <SystemClock_Config+0xcc>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <SystemClock_Config+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <SystemClock_Config+0xd0>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <SystemClock_Config+0xd0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fdfe 	bl	80048b0 <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cba:	f000 f9b3 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2105      	movs	r1, #5
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 f85f 	bl	8004da0 <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ce8:	f000 f99c 	bl	8001024 <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3750      	adds	r7, #80	@ 0x50
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000

08000cfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <MX_I2C1_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d08:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <MX_I2C1_Init+0x58>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_I2C1_Init+0x50>)
 8000d3a:	f002 ffd5 	bl	8003ce8 <HAL_I2C_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d44:	f000 f96e 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000098 	.word	0x20000098
 8000d50:	40005400 	.word	0x40005400
 8000d54:	000186a0 	.word	0x000186a0

08000d58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d5e:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <MX_I2S3_Init+0x58>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <MX_I2S3_Init+0x5c>)
 8000d82:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_I2S3_Init+0x54>)
 8000d98:	f003 f8ea 	bl	8003f70 <HAL_I2S_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000da2:	f000 f93f 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000ec 	.word	0x200000ec
 8000db0:	40003c00 	.word	0x40003c00
 8000db4:	00017700 	.word	0x00017700

08000db8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dbe:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <MX_SPI1_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_SPI1_Init+0x64>)
 8000e0a:	f004 fb17 	bl	800543c <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e14:	f000 f906 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000134 	.word	0x20000134
 8000e20:	40013000 	.word	0x40013000

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	@ 0x30
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b73      	ldr	r3, [pc, #460]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a72      	ldr	r2, [pc, #456]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b70      	ldr	r3, [pc, #448]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a6b      	ldr	r2, [pc, #428]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b69      	ldr	r3, [pc, #420]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b65      	ldr	r3, [pc, #404]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a64      	ldr	r2, [pc, #400]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b62      	ldr	r3, [pc, #392]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b5e      	ldr	r3, [pc, #376]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a5d      	ldr	r2, [pc, #372]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a56      	ldr	r2, [pc, #344]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b54      	ldr	r3, [pc, #336]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b50      	ldr	r3, [pc, #320]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a4f      	ldr	r2, [pc, #316]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800100c <MX_GPIO_Init+0x1e8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|pin1_Pin|pin2_Pin|pin3_Pin
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f643 7188 	movw	r1, #16264	@ 0x3f88
 8000ee8:	4849      	ldr	r0, [pc, #292]	@ (8001010 <MX_GPIO_Init+0x1ec>)
 8000eea:	f000 fdc9 	bl	8001a80 <HAL_GPIO_WritePin>
                          |pin4_Pin|pin5_Pin|pin6_Pin|pin7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4848      	ldr	r0, [pc, #288]	@ (8001014 <MX_GPIO_Init+0x1f0>)
 8000ef4:	f000 fdc4 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000efe:	4846      	ldr	r0, [pc, #280]	@ (8001018 <MX_GPIO_Init+0x1f4>)
 8000f00:	f000 fdbe 	bl	8001a80 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin pin1_Pin pin2_Pin pin3_Pin
                           pin4_Pin pin5_Pin pin6_Pin pin7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|pin1_Pin|pin2_Pin|pin3_Pin
 8000f04:	f643 7388 	movw	r3, #16264	@ 0x3f88
 8000f08:	61fb      	str	r3, [r7, #28]
                          |pin4_Pin|pin5_Pin|pin6_Pin|pin7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483c      	ldr	r0, [pc, #240]	@ (8001010 <MX_GPIO_Init+0x1ec>)
 8000f1e:	f000 fc13 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4836      	ldr	r0, [pc, #216]	@ (8001014 <MX_GPIO_Init+0x1f0>)
 8000f3a:	f000 fc05 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	482e      	ldr	r0, [pc, #184]	@ (8001014 <MX_GPIO_Init+0x1f0>)
 8000f5a:	f000 fbf5 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f62:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	482a      	ldr	r0, [pc, #168]	@ (800101c <MX_GPIO_Init+0x1f8>)
 8000f74:	f000 fbe8 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4825      	ldr	r0, [pc, #148]	@ (8001020 <MX_GPIO_Init+0x1fc>)
 8000f8c:	f000 fbdc 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <MX_GPIO_Init+0x1fc>)
 8000fae:	f000 fbcb 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : azalt_Pin arttir_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = azalt_Pin|arttir_Pin|OTG_FS_OverCurrent_Pin;
 8000fb2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <MX_GPIO_Init+0x1f4>)
 8000fc8:	f000 fbbe 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fcc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000fd0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_GPIO_Init+0x1f4>)
 8000fe6:	f000 fbaf 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_GPIO_Init+0x1ec>)
 8001000:	f000 fba2 	bl	8001748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	@ 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40021000 	.word	0x40021000
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_MspInit+0x4c>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001044:	6453      	str	r3, [r2, #68]	@ 0x44
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_MspInit+0x4c>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x4c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x4c>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 fb28 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <HAL_I2C_MspInit+0x84>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d0:	2304      	movs	r3, #4
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <HAL_I2C_MspInit+0x8c>)
 80010dc:	f000 fb34 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_I2C_MspInit+0x88>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	@ 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40005400 	.word	0x40005400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a31      	ldr	r2, [pc, #196]	@ (8001200 <HAL_I2S_MspInit+0xf0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d15a      	bne.n	80011f6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001144:	23c0      	movs	r3, #192	@ 0xc0
 8001146:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f004 f831 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800115c:	f7ff ff62 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 800116a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	@ 0x30
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	4a18      	ldr	r2, [pc, #96]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_I2S_MspInit+0xf4>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011b4:	2310      	movs	r3, #16
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c4:	2306      	movs	r3, #6
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <HAL_I2S_MspInit+0xf8>)
 80011d0:	f000 faba 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011d4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e6:	2306      	movs	r3, #6
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4806      	ldr	r0, [pc, #24]	@ (800120c <HAL_I2S_MspInit+0xfc>)
 80011f2:	f000 faa9 	bl	8001748 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	@ 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40003c00 	.word	0x40003c00
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020800 	.word	0x40020800

08001210 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_SPI_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 800123c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_SPI_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800126a:	23e0      	movs	r3, #224	@ 0xe0
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800127a:	2305      	movs	r3, #5
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_SPI_MspInit+0x8c>)
 8001286:	f000 fa5f 	bl	8001748 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40013000 	.word	0x40013000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f8d1 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <OTG_FS_IRQHandler+0x10>)
 8001306:	f000 feb5 	bl	8002074 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000570 	.word	0x20000570

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f007 fed0 	bl	80090e8 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20020000 	.word	0x20020000
 8001374:	00000400 	.word	0x00000400
 8001378:	2000018c 	.word	0x2000018c
 800137c:	20000a98 	.word	0x20000a98

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a8:	f7ff ffea 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f007 fe8f 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f86f 	bl	80004b8 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013e8:	08009218 	.word	0x08009218
  ldr r2, =_sbss
 80013ec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013f0:	20000a98 	.word	0x20000a98

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f94f 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fe00 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f967 	bl	800172e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f92f 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000190 	.word	0x20000190

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000190 	.word	0x20000190

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e16b      	b.n	8001a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 815a 	bne.w	8001a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80b4 	beq.w	8001a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b60      	ldr	r3, [pc, #384]	@ (8001a54 <HAL_GPIO_Init+0x30c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a54 <HAL_GPIO_Init+0x30c>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b5d      	ldr	r3, [pc, #372]	@ (8001a54 <HAL_GPIO_Init+0x30c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001a58 <HAL_GPIO_Init+0x310>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a52      	ldr	r2, [pc, #328]	@ (8001a5c <HAL_GPIO_Init+0x314>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d02b      	beq.n	800196e <HAL_GPIO_Init+0x226>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a51      	ldr	r2, [pc, #324]	@ (8001a60 <HAL_GPIO_Init+0x318>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d025      	beq.n	800196a <HAL_GPIO_Init+0x222>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a50      	ldr	r2, [pc, #320]	@ (8001a64 <HAL_GPIO_Init+0x31c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x21e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4f      	ldr	r2, [pc, #316]	@ (8001a68 <HAL_GPIO_Init+0x320>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x21a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4e      	ldr	r2, [pc, #312]	@ (8001a6c <HAL_GPIO_Init+0x324>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x216>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4d      	ldr	r2, [pc, #308]	@ (8001a70 <HAL_GPIO_Init+0x328>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x212>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <HAL_GPIO_Init+0x32c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4b      	ldr	r2, [pc, #300]	@ (8001a78 <HAL_GPIO_Init+0x330>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x20a>
 800194e:	2307      	movs	r3, #7
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001952:	2308      	movs	r3, #8
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	@ (8001a58 <HAL_GPIO_Init+0x310>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a32      	ldr	r2, [pc, #200]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <HAL_GPIO_Init+0x334>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae90 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af02      	add	r7, sp, #8
 8001ab8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e059      	b.n	8001b78 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f006 ff80 	bl	80089e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001af2:	d102      	bne.n	8001afa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fd9a 	bl	8005638 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7c1a      	ldrb	r2, [r3, #16]
 8001b0c:	f88d 2000 	strb.w	r2, [sp]
 8001b10:	3304      	adds	r3, #4
 8001b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b14:	f003 fd1b 	bl	800554e <USB_CoreInit>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e026      	b.n	8001b78 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fd92 	bl	800565a <USB_SetCurrentMode>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e017      	b.n	8001b78 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7c1a      	ldrb	r2, [r3, #16]
 8001b50:	f88d 2000 	strb.w	r2, [sp]
 8001b54:	3304      	adds	r3, #4
 8001b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b58:	f003 ff34 	bl	80059c4 <USB_HostInit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e004      	b.n	8001b78 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	@ 0x2c
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70bb      	strb	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001b9a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b9c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_HCD_HC_Init+0x2c>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e09d      	b.n	8001ce8 <HAL_HCD_HC_Init+0x168>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3319      	adds	r3, #25
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	787a      	ldrb	r2, [r7, #1]
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3315      	adds	r3, #21
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3326      	adds	r3, #38	@ 0x26
 8001c00:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001c04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	78bb      	ldrb	r3, [r7, #2]
 8001c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3316      	adds	r3, #22
 8001c1e:	4602      	mov	r2, r0
 8001c20:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fbc8 	bl	80023bc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	da0a      	bge.n	8001c4a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3317      	adds	r3, #23
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e009      	b.n	8001c5e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3317      	adds	r3, #23
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f812 	bl	8005c8c <USB_GetHostSpeed>
 8001c68:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c6a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10b      	bne.n	8001c8a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_HCD_HC_Init+0x10a>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d104      	bne.n	8001c8a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c84:	d901      	bls.n	8001c8a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c86:	23bc      	movs	r3, #188	@ 0xbc
 8001c88:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3318      	adds	r3, #24
 8001c9a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	b298      	uxth	r0, r3
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3328      	adds	r3, #40	@ 0x28
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	787c      	ldrb	r4, [r7, #1]
 8001cc2:	78ba      	ldrb	r2, [r7, #2]
 8001cc4:	78f9      	ldrb	r1, [r7, #3]
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	f004 f801 	bl	8005cdc <USB_HC_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_HCD_HC_Halt+0x1e>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e00f      	b.n	8001d2e <HAL_HCD_HC_Halt+0x3e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fb93 	bl	800644a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	70fb      	strb	r3, [r7, #3]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70bb      	strb	r3, [r7, #2]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3317      	adds	r3, #23
 8001d62:	78ba      	ldrb	r2, [r7, #2]
 8001d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3326      	adds	r3, #38	@ 0x26
 8001d76:	787a      	ldrb	r2, [r7, #1]
 8001d78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d7a:	7c3b      	ldrb	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d114      	bne.n	8001daa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	332a      	adds	r3, #42	@ 0x2a
 8001d90:	2203      	movs	r2, #3
 8001d92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3319      	adds	r3, #25
 8001da4:	7f3a      	ldrb	r2, [r7, #28]
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e009      	b.n	8001dbe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	332a      	adds	r3, #42	@ 0x2a
 8001dba:	2202      	movs	r2, #2
 8001dbc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dbe:	787b      	ldrb	r3, [r7, #1]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	f200 8102 	bhi.w	8001fca <HAL_HCD_HC_SubmitRequest+0x292>
 8001dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001fb5 	.word	0x08001fb5
 8001dd4:	08001ea1 	.word	0x08001ea1
 8001dd8:	08001f2b 	.word	0x08001f2b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001ddc:	7c3b      	ldrb	r3, [r7, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	f040 80f5 	bne.w	8001fce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d12d      	bne.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001dea:	8b3b      	ldrh	r3, [r7, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	333d      	adds	r3, #61	@ 0x3d
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	@ 0x3d
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	332a      	adds	r3, #42	@ 0x2a
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e2e:	e0ce      	b.n	8001fce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	332a      	adds	r3, #42	@ 0x2a
 8001e40:	2202      	movs	r2, #2
 8001e42:	701a      	strb	r2, [r3, #0]
      break;
 8001e44:	e0c3      	b.n	8001fce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	331a      	adds	r3, #26
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	f040 80b8 	bne.w	8001fce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	333c      	adds	r3, #60	@ 0x3c
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	332a      	adds	r3, #42	@ 0x2a
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
      break;
 8001e88:	e0a1      	b.n	8001fce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	332a      	adds	r3, #42	@ 0x2a
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	701a      	strb	r2, [r3, #0]
      break;
 8001e9e:	e096      	b.n	8001fce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ea0:	78bb      	ldrb	r3, [r7, #2]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d120      	bne.n	8001ee8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	333d      	adds	r3, #61	@ 0x3d
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10a      	bne.n	8001ed2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	332a      	adds	r3, #42	@ 0x2a
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ed0:	e07e      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	332a      	adds	r3, #42	@ 0x2a
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	701a      	strb	r2, [r3, #0]
      break;
 8001ee6:	e073      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	333c      	adds	r3, #60	@ 0x3c
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10a      	bne.n	8001f14 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	332a      	adds	r3, #42	@ 0x2a
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
      break;
 8001f12:	e05d      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	332a      	adds	r3, #42	@ 0x2a
 8001f24:	2202      	movs	r2, #2
 8001f26:	701a      	strb	r2, [r3, #0]
      break;
 8001f28:	e052      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f2a:	78bb      	ldrb	r3, [r7, #2]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d120      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	333d      	adds	r3, #61	@ 0x3d
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	332a      	adds	r3, #42	@ 0x2a
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f5a:	e039      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	332a      	adds	r3, #42	@ 0x2a
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	701a      	strb	r2, [r3, #0]
      break;
 8001f70:	e02e      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	333c      	adds	r3, #60	@ 0x3c
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	332a      	adds	r3, #42	@ 0x2a
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
      break;
 8001f9c:	e018      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	332a      	adds	r3, #42	@ 0x2a
 8001fae:	2202      	movs	r2, #2
 8001fb0:	701a      	strb	r2, [r3, #0]
      break;
 8001fb2:	e00d      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	332a      	adds	r3, #42	@ 0x2a
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
      break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	332c      	adds	r3, #44	@ 0x2c
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	8b39      	ldrh	r1, [r7, #24]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4403      	add	r3, r0
 8001ff4:	3334      	adds	r3, #52	@ 0x34
 8001ff6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	334c      	adds	r3, #76	@ 0x4c
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3338      	adds	r3, #56	@ 0x38
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3315      	adds	r3, #21
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	334d      	adds	r3, #77	@ 0x4d
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3310      	adds	r3, #16
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	1d19      	adds	r1, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	799b      	ldrb	r3, [r3, #6]
 8002062:	461a      	mov	r2, r3
 8002064:	f003 ff66 	bl	8005f34 <USB_HC_StartXfer>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop

08002074 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fc5b 	bl	8005946 <USB_GetMode>
 8002090:	4603      	mov	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	f040 80fb 	bne.w	800228e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fc1e 	bl	80058de <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80f1 	beq.w	800228c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fc15 	bl	80058de <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020be:	d104      	bne.n	80020ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fc05 	bl	80058de <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020de:	d104      	bne.n	80020ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fbf5 	bl	80058de <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020fe:	d104      	bne.n	800210a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002108:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fbe5 	bl	80058de <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d103      	bne.n	8002126 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fbd7 	bl	80058de <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800213a:	d120      	bne.n	800217e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002144:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d113      	bne.n	800217e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002156:	2110      	movs	r1, #16
 8002158:	6938      	ldr	r0, [r7, #16]
 800215a:	f003 faca 	bl	80056f2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800215e:	6938      	ldr	r0, [r7, #16]
 8002160:	f003 faf9 	bl	8005756 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7a5b      	ldrb	r3, [r3, #9]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d105      	bne.n	8002178 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fcea 	bl	8005b4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f006 fcb1 	bl	8008ae0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fbab 	bl	80058de <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800218e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002192:	d102      	bne.n	800219a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f001 fd33 	bl	8003c00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fb9d 	bl	80058de <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d106      	bne.n	80021bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f006 fc7a 	bl	8008aa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2208      	movs	r2, #8
 80021ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fb8c 	bl	80058de <USB_ReadInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021d0:	d139      	bne.n	8002246 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f926 	bl	8006428 <USB_HC_ReadInterrupt>
 80021dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e025      	b.n	8002230 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d018      	beq.n	800222a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800220a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800220e:	d106      	bne.n	800221e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f905 	bl	8002426 <HCD_HC_IN_IRQHandler>
 800221c:	e005      	b.n	800222a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 ff67 	bl	80030f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	461a      	mov	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4293      	cmp	r3, r2
 800223a:	d3d3      	bcc.n	80021e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fb47 	bl	80058de <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d101      	bne.n	800225e <HAL_HCD_IRQHandler+0x1ea>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_HCD_IRQHandler+0x1ec>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d014      	beq.n	800228e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0210 	bic.w	r2, r2, #16
 8002272:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f001 fbe4 	bl	8003a42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0210 	orr.w	r2, r2, #16
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	e000      	b.n	800228e <HAL_HCD_IRQHandler+0x21a>
      return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_HCD_Start+0x16>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e013      	b.n	80022d2 <HAL_HCD_Start+0x3e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fcae 	bl	8005c1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f9a7 	bl	8005616 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_HCD_Stop+0x16>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e00d      	b.n	800230c <HAL_HCD_Stop+0x32>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 fa01 	bl	8006704 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fc50 	bl	8005bc6 <USB_ResetPort>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	781b      	ldrb	r3, [r3, #0]
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3338      	adds	r3, #56	@ 0x38
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fc92 	bl	8005cba <USB_GetCurrentFrame>
 8002396:	4603      	mov	r3, r0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fc6d 	bl	8005c8c <USB_GetHostSpeed>
 80023b2:	4603      	mov	r3, r0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	331a      	adds	r3, #26
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	331b      	adds	r3, #27
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	3325      	adds	r3, #37	@ 0x25
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3324      	adds	r3, #36	@ 0x24
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fa5d 	bl	8005904 <USB_ReadChInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d11a      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2304      	movs	r3, #4
 8002464:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	334d      	adds	r3, #77	@ 0x4d
 8002476:	2207      	movs	r2, #7
 8002478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 ffe1 	bl	800644a <USB_HC_Halt>
 8002488:	e09e      	b.n	80025c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fa36 	bl	8005904 <USB_ReadChInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024a2:	d11b      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334d      	adds	r3, #77	@ 0x4d
 80024c8:	2208      	movs	r2, #8
 80024ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 ffb8 	bl	800644a <USB_HC_Halt>
 80024da:	e075      	b.n	80025c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fa0d 	bl	8005904 <USB_ReadChInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11a      	bne.n	800252a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	2308      	movs	r3, #8
 8002504:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334d      	adds	r3, #77	@ 0x4d
 8002516:	2206      	movs	r2, #6
 8002518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f003 ff91 	bl	800644a <USB_HC_Halt>
 8002528:	e04e      	b.n	80025c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f003 f9e6 	bl	8005904 <USB_ReadChInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002542:	d11b      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002556:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	334d      	adds	r3, #77	@ 0x4d
 8002568:	2209      	movs	r2, #9
 800256a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f003 ff68 	bl	800644a <USB_HC_Halt>
 800257a:	e025      	b.n	80025c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f003 f9bd 	bl	8005904 <USB_ReadChInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002590:	2b80      	cmp	r3, #128	@ 0x80
 8002592:	d119      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a0:	461a      	mov	r2, r3
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	334d      	adds	r3, #77	@ 0x4d
 80025b6:	2207      	movs	r2, #7
 80025b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 ff41 	bl	800644a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f997 	bl	8005904 <USB_ReadChInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e0:	d112      	bne.n	8002608 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 ff2d 	bl	800644a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002602:	6093      	str	r3, [r2, #8]
 8002604:	f000 bd75 	b.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f977 	bl	8005904 <USB_ReadChInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 8128 	bne.w	8002872 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2320      	movs	r3, #32
 8002632:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	331b      	adds	r3, #27
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d119      	bne.n	800267e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	331b      	adds	r3, #27
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	0151      	lsls	r1, r2, #5
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	440a      	add	r2, r1
 8002674:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	799b      	ldrb	r3, [r3, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01b      	beq.n	80026be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3330      	adds	r3, #48	@ 0x30
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	1ac9      	subs	r1, r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4403      	add	r3, r0
 80026ba:	3338      	adds	r3, #56	@ 0x38
 80026bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	334d      	adds	r3, #77	@ 0x4d
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3344      	adds	r3, #68	@ 0x44
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2301      	movs	r3, #1
 80026f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3326      	adds	r3, #38	@ 0x26
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3326      	adds	r3, #38	@ 0x26
 800271e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002720:	2b02      	cmp	r3, #2
 8002722:	d110      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fe8c 	bl	800644a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2310      	movs	r3, #16
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	e03d      	b.n	80027c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3326      	adds	r3, #38	@ 0x26
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d00a      	beq.n	8002772 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3326      	adds	r3, #38	@ 0x26
 800276c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800276e:	2b01      	cmp	r3, #1
 8002770:	d127      	bne.n	80027c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	0151      	lsls	r1, r2, #5
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	440a      	add	r2, r1
 8002788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800278c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002790:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	334c      	adds	r3, #76	@ 0x4c
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334c      	adds	r3, #76	@ 0x4c
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f006 f99d 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	799b      	ldrb	r3, [r3, #6]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d13b      	bne.n	8002842 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3338      	adds	r3, #56	@ 0x38
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4403      	add	r3, r0
 80027ea:	3328      	adds	r3, #40	@ 0x28
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	440b      	add	r3, r1
 80027f0:	1e59      	subs	r1, r3, #1
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4403      	add	r3, r0
 8002800:	3328      	adds	r3, #40	@ 0x28
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8470 	beq.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	333c      	adds	r3, #60	@ 0x3c
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	f083 0301 	eor.w	r3, r3, #1
 800282a:	b2d8      	uxtb	r0, r3
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	333c      	adds	r3, #60	@ 0x3c
 800283a:	4602      	mov	r2, r0
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	f000 bc58 	b.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	333c      	adds	r3, #60	@ 0x3c
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2d8      	uxtb	r0, r3
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	333c      	adds	r3, #60	@ 0x3c
 800286a:	4602      	mov	r2, r0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	f000 bc40 	b.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 f842 	bl	8005904 <USB_ReadChInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b20      	cmp	r3, #32
 8002888:	d131      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	2320      	movs	r3, #32
 800289a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	331a      	adds	r3, #26
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 841f 	bne.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	331b      	adds	r3, #27
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	334d      	adds	r3, #77	@ 0x4d
 80028d8:	2203      	movs	r2, #3
 80028da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fdb0 	bl	800644a <USB_HC_Halt>
 80028ea:	f000 bc02 	b.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 f804 	bl	8005904 <USB_ReadChInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	f040 8305 	bne.w	8002f12 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2302      	movs	r3, #2
 8002918:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334d      	adds	r3, #77	@ 0x4d
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d114      	bne.n	800295a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	@ 0x4d
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334c      	adds	r3, #76	@ 0x4c
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e2cc      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	334d      	adds	r3, #77	@ 0x4d
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d114      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334d      	adds	r3, #77	@ 0x4d
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	334c      	adds	r3, #76	@ 0x4c
 8002994:	2205      	movs	r2, #5
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e2ac      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334d      	adds	r3, #77	@ 0x4d
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d00b      	beq.n	80029c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	334d      	adds	r3, #77	@ 0x4d
 80029c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	f040 80a6 	bne.w	8002b14 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	@ 0x4d
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3344      	adds	r3, #68	@ 0x44
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4403      	add	r3, r0
 80029fc:	3344      	adds	r3, #68	@ 0x44
 80029fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3344      	adds	r3, #68	@ 0x44
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d943      	bls.n	8002a9e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3344      	adds	r3, #68	@ 0x44
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	331a      	adds	r3, #26
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d123      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	331b      	adds	r3, #27
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331c      	adds	r3, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334c      	adds	r3, #76	@ 0x4c
 8002a98:	2204      	movs	r2, #4
 8002a9a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a9c:	e229      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334c      	adds	r3, #76	@ 0x4c
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3326      	adds	r3, #38	@ 0x26
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3326      	adds	r3, #38	@ 0x26
 8002ad8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	f040 8209 	bne.w	8002ef2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002af6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002afe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b12:	e1ee      	b.n	8002ef2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	@ 0x4d
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	f040 80c8 	bne.w	8002cbc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	334d      	adds	r3, #77	@ 0x4d
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	331b      	adds	r3, #27
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 81ce 	bne.w	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3326      	adds	r3, #38	@ 0x26
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d16b      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3348      	adds	r3, #72	@ 0x48
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c59      	adds	r1, r3, #1
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3348      	adds	r3, #72	@ 0x48
 8002b90:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3348      	adds	r3, #72	@ 0x48
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d943      	bls.n	8002c30 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3348      	adds	r3, #72	@ 0x48
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331b      	adds	r3, #27
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3344      	adds	r3, #68	@ 0x44
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d809      	bhi.n	8002bfa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	331c      	adds	r3, #28
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	0151      	lsls	r1, r2, #5
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	440a      	add	r2, r1
 8002c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c18:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	334c      	adds	r3, #76	@ 0x4c
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e014      	b.n	8002c5a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	334c      	adds	r3, #76	@ 0x4c
 8002c40:	2202      	movs	r2, #2
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e009      	b.n	8002c5a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334c      	adds	r3, #76	@ 0x4c
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3326      	adds	r3, #38	@ 0x26
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3326      	adds	r3, #38	@ 0x26
 8002c80:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 8136 	bne.w	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c9e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ca6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e11b      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334d      	adds	r3, #77	@ 0x4d
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	f040 8081 	bne.w	8002dd6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	334d      	adds	r3, #77	@ 0x4d
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	331b      	adds	r3, #27
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 80fa 	bne.w	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	@ 0x4c
 8002d10:	2202      	movs	r2, #2
 8002d12:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d32:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	0151      	lsls	r1, r2, #5
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	440a      	add	r2, r1
 8002d4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d52:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	0151      	lsls	r1, r2, #5
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	440a      	add	r2, r1
 8002d6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d6e:	f023 0320 	bic.w	r3, r3, #32
 8002d72:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3326      	adds	r3, #38	@ 0x26
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3326      	adds	r3, #38	@ 0x26
 8002d9a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 80a9 	bne.w	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002db8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e08e      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334d      	adds	r3, #77	@ 0x4d
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d143      	bne.n	8002e74 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334c      	adds	r3, #76	@ 0x4c
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3326      	adds	r3, #38	@ 0x26
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3326      	adds	r3, #38	@ 0x26
 8002e3a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d159      	bne.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e03f      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	334d      	adds	r3, #77	@ 0x4d
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d126      	bne.n	8002ed8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	334d      	adds	r3, #77	@ 0x4d
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3344      	adds	r3, #68	@ 0x44
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1c59      	adds	r1, r3, #1
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3344      	adds	r3, #68	@ 0x44
 8002ec0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	334c      	adds	r3, #76	@ 0x4c
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e00d      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	334d      	adds	r3, #77	@ 0x4d
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	f000 8100 	beq.w	80030f0 <HCD_HC_IN_IRQHandler+0xcca>
 8002ef0:	e000      	b.n	8002ef4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ef2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334c      	adds	r3, #76	@ 0x4c
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f005 fdf6 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f10:	e0ef      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fcf2 	bl	8005904 <USB_ReadChInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f26:	2b40      	cmp	r3, #64	@ 0x40
 8002f28:	d12f      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	2340      	movs	r3, #64	@ 0x40
 8002f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	331a      	adds	r3, #26
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fa61 	bl	800644a <USB_HC_Halt>
 8002f88:	e0b3      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 fcb6 	bl	8005904 <USB_ReadChInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	f040 80a7 	bne.w	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3326      	adds	r3, #38	@ 0x26
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d11b      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3344      	adds	r3, #68	@ 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	334d      	adds	r3, #77	@ 0x4d
 8002fde:	2204      	movs	r2, #4
 8002fe0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fa2d 	bl	800644a <USB_HC_Halt>
 8002ff0:	e03f      	b.n	8003072 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3326      	adds	r3, #38	@ 0x26
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3326      	adds	r3, #38	@ 0x26
 8003018:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800301a:	2b02      	cmp	r3, #2
 800301c:	d129      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3344      	adds	r3, #68	@ 0x44
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	799b      	ldrb	r3, [r3, #6]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HCD_HC_IN_IRQHandler+0xc2a>
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	331b      	adds	r3, #27
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d110      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	334d      	adds	r3, #77	@ 0x4d
 8003060:	2204      	movs	r2, #4
 8003062:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f003 f9ec 	bl	800644a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	331b      	adds	r3, #27
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d129      	bne.n	80030dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	331b      	adds	r3, #27
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	0151      	lsls	r1, r2, #5
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	440a      	add	r2, r1
 80030b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	461a      	mov	r2, r3
 80030ea:	2310      	movs	r3, #16
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e000      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80030f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fbf4 	bl	8005904 <USB_ReadChInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d11b      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003132:	461a      	mov	r2, r3
 8003134:	2304      	movs	r3, #4
 8003136:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	@ 0x4d
 8003148:	2207      	movs	r2, #7
 800314a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f978 	bl	800644a <USB_HC_Halt>
 800315a:	f000 bc6f 	b.w	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f002 fbcc 	bl	8005904 <USB_ReadChInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	f040 8082 	bne.w	800327c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003184:	461a      	mov	r2, r3
 8003186:	2320      	movs	r3, #32
 8003188:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3319      	adds	r3, #25
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d124      	bne.n	80031ea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3319      	adds	r3, #25
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334c      	adds	r3, #76	@ 0x4c
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334d      	adds	r3, #77	@ 0x4d
 80031d8:	2203      	movs	r2, #3
 80031da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f003 f930 	bl	800644a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	331a      	adds	r3, #26
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 841d 	bne.w	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 8411 	bne.w	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3326      	adds	r3, #38	@ 0x26
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d009      	beq.n	8003244 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	331b      	adds	r3, #27
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	2203      	movs	r2, #3
 8003256:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f003 f8f2 	bl	800644a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3344      	adds	r3, #68	@ 0x44
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e3df      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f002 fb3d 	bl	8005904 <USB_ReadChInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003294:	d111      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a2:	461a      	mov	r2, r3
 80032a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 f8c9 	bl	800644a <USB_HC_Halt>
 80032b8:	e3c0      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fb1e 	bl	8005904 <USB_ReadChInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d168      	bne.n	80033a4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3344      	adds	r3, #68	@ 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 fb08 	bl	8005904 <USB_ReadChInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d112      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3319      	adds	r3, #25
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2340      	movs	r3, #64	@ 0x40
 8003322:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	331b      	adds	r3, #27
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d019      	beq.n	800336e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	331b      	adds	r3, #27
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	440a      	add	r2, r1
 8003364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337a:	461a      	mov	r2, r3
 800337c:	2301      	movs	r3, #1
 800337e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	@ 0x4d
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f003 f854 	bl	800644a <USB_HC_Halt>
 80033a2:	e34b      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 faa9 	bl	8005904 <USB_ReadChInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b40      	cmp	r3, #64	@ 0x40
 80033ba:	d139      	bne.n	8003430 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	@ 0x4d
 80033cc:	2205      	movs	r2, #5
 80033ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	331a      	adds	r3, #26
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3319      	adds	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3344      	adds	r3, #68	@ 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f003 f817 	bl	800644a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2340      	movs	r3, #64	@ 0x40
 800342c:	6093      	str	r3, [r2, #8]
 800342e:	e305      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f002 fa63 	bl	8005904 <USB_ReadChInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d11a      	bne.n	800347e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	461a      	mov	r2, r3
 8003456:	2308      	movs	r3, #8
 8003458:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	2206      	movs	r2, #6
 800346c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f002 ffe7 	bl	800644a <USB_HC_Halt>
 800347c:	e2de      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fa3c 	bl	8005904 <USB_ReadChInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b10      	cmp	r3, #16
 8003494:	d144      	bne.n	8003520 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3344      	adds	r3, #68	@ 0x44
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334d      	adds	r3, #77	@ 0x4d
 80034ba:	2204      	movs	r2, #4
 80034bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3319      	adds	r3, #25
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d114      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3318      	adds	r3, #24
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3319      	adds	r3, #25
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f002 ff9f 	bl	800644a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	2310      	movs	r3, #16
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	e28d      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f002 f9eb 	bl	8005904 <USB_ReadChInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003534:	2b80      	cmp	r3, #128	@ 0x80
 8003536:	d169      	bne.n	800360c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	799b      	ldrb	r3, [r3, #6]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	334d      	adds	r3, #77	@ 0x4d
 8003550:	2207      	movs	r2, #7
 8003552:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f002 ff74 	bl	800644a <USB_HC_Halt>
 8003562:	e049      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3344      	adds	r3, #68	@ 0x44
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4403      	add	r3, r0
 8003584:	3344      	adds	r3, #68	@ 0x44
 8003586:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	@ 0x44
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d922      	bls.n	80035e4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3344      	adds	r3, #68	@ 0x44
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	@ 0x4c
 80035c2:	2204      	movs	r2, #4
 80035c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	@ 0x4c
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f005 fa8d 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 80035e2:	e009      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334c      	adds	r3, #76	@ 0x4c
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003604:	461a      	mov	r2, r3
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	6093      	str	r3, [r2, #8]
 800360a:	e217      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f002 f975 	bl	8005904 <USB_ReadChInterrupts>
 800361a:	4603      	mov	r3, r0
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003624:	d11b      	bne.n	800365e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334d      	adds	r3, #77	@ 0x4d
 8003636:	2209      	movs	r2, #9
 8003638:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f002 ff01 	bl	800644a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e1ee      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f002 f94c 	bl	8005904 <USB_ReadChInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 81df 	bne.w	8003a36 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2302      	movs	r3, #2
 8003688:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334d      	adds	r3, #77	@ 0x4d
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	f040 8093 	bne.w	80037c8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	334d      	adds	r3, #77	@ 0x4d
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334c      	adds	r3, #76	@ 0x4c
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3326      	adds	r3, #38	@ 0x26
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d00b      	beq.n	80036f8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3326      	adds	r3, #38	@ 0x26
 80036f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	f040 8190 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	799b      	ldrb	r3, [r3, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d115      	bne.n	800372c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	333d      	adds	r3, #61	@ 0x3d
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	f083 0301 	eor.w	r3, r3, #1
 8003718:	b2d8      	uxtb	r0, r3
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	333d      	adds	r3, #61	@ 0x3d
 8003728:	4602      	mov	r2, r0
 800372a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	799b      	ldrb	r3, [r3, #6]
 8003730:	2b01      	cmp	r3, #1
 8003732:	f040 8171 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3334      	adds	r3, #52	@ 0x34
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8165 	beq.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3334      	adds	r3, #52	@ 0x34
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	3328      	adds	r3, #40	@ 0x28
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	440b      	add	r3, r1
 8003774:	1e59      	subs	r1, r3, #1
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	fbb1 f3f3 	udiv	r3, r1, r3
 800378c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 813f 	beq.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	333d      	adds	r3, #61	@ 0x3d
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	f083 0301 	eor.w	r3, r3, #1
 80037b2:	b2d8      	uxtb	r0, r3
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	333d      	adds	r3, #61	@ 0x3d
 80037c2:	4602      	mov	r2, r0
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e127      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	334d      	adds	r3, #77	@ 0x4d
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d120      	bne.n	8003820 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	334d      	adds	r3, #77	@ 0x4d
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	331b      	adds	r3, #27
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 8107 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	334c      	adds	r3, #76	@ 0x4c
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e0fb      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	334d      	adds	r3, #77	@ 0x4d
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d13a      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334d      	adds	r3, #77	@ 0x4d
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	334c      	adds	r3, #76	@ 0x4c
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	331b      	adds	r3, #27
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 80d1 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	331b      	adds	r3, #27
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	0151      	lsls	r1, r2, #5
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	440a      	add	r2, r1
 80038a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a8:	6053      	str	r3, [r2, #4]
 80038aa:	e0b5      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d114      	bne.n	80038ec <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	334d      	adds	r3, #77	@ 0x4d
 80038d2:	2202      	movs	r2, #2
 80038d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334c      	adds	r3, #76	@ 0x4c
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e095      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334d      	adds	r3, #77	@ 0x4d
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d114      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334d      	adds	r3, #77	@ 0x4d
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334c      	adds	r3, #76	@ 0x4c
 8003926:	2205      	movs	r2, #5
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e075      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	334d      	adds	r3, #77	@ 0x4d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b07      	cmp	r3, #7
 8003940:	d00a      	beq.n	8003958 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	334d      	adds	r3, #77	@ 0x4d
 8003952:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003954:	2b09      	cmp	r3, #9
 8003956:	d170      	bne.n	8003a3a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	334d      	adds	r3, #77	@ 0x4d
 8003968:	2202      	movs	r2, #2
 800396a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3344      	adds	r3, #68	@ 0x44
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1c59      	adds	r1, r3, #1
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4403      	add	r3, r0
 800398c:	3344      	adds	r3, #68	@ 0x44
 800398e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3344      	adds	r3, #68	@ 0x44
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d914      	bls.n	80039d0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3344      	adds	r3, #68	@ 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	334c      	adds	r3, #76	@ 0x4c
 80039ca:	2204      	movs	r2, #4
 80039cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039ce:	e022      	b.n	8003a16 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	334c      	adds	r3, #76	@ 0x4c
 80039e0:	2202      	movs	r2, #2
 80039e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a16:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	334c      	adds	r3, #76	@ 0x4c
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f005 f864 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a34:	e002      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003a3a:	bf00      	nop
  }
}
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	@ 0x28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	0c5b      	lsrs	r3, r3, #17
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d004      	beq.n	8003a88 <HCD_RXQLVL_IRQHandler+0x46>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	f000 80b6 	beq.w	8003bf2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a86:	e0b7      	b.n	8003bf8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80b3 	beq.w	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	332c      	adds	r3, #44	@ 0x2c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a7 	beq.w	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3338      	adds	r3, #56	@ 0x38
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	18d1      	adds	r1, r2, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4403      	add	r3, r0
 8003acc:	3334      	adds	r3, #52	@ 0x34
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4299      	cmp	r1, r3
 8003ad2:	f200 8083 	bhi.w	8003bdc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	332c      	adds	r3, #44	@ 0x2c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	b292      	uxth	r2, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	f001 fe9c 	bl	800582e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	332c      	adds	r3, #44	@ 0x2c
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	18d1      	adds	r1, r2, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	332c      	adds	r3, #44	@ 0x2c
 8003b1c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3338      	adds	r3, #56	@ 0x38
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	18d1      	adds	r1, r2, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4403      	add	r3, r0
 8003b42:	3338      	adds	r3, #56	@ 0x38
 8003b44:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	0cdb      	lsrs	r3, r3, #19
 8003b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3328      	adds	r3, #40	@ 0x28
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d13f      	bne.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03c      	beq.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	333c      	adds	r3, #60	@ 0x3c
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	333c      	adds	r3, #60	@ 0x3c
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	e00c      	b.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	334c      	adds	r3, #76	@ 0x4c
 8003bec:	2204      	movs	r2, #4
 8003bee:	701a      	strb	r2, [r3, #0]
      break;
 8003bf0:	e001      	b.n	8003bf6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003bf6:	bf00      	nop
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3728      	adds	r7, #40	@ 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d10b      	bne.n	8003c50 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d102      	bne.n	8003c48 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f004 ff3e 	bl	8008ac4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f043 0302 	orr.w	r3, r3, #2
 8003c4e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d132      	bne.n	8003cc0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d126      	bne.n	8003cba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7a5b      	ldrb	r3, [r3, #9]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d113      	bne.n	8003c9c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c7e:	d106      	bne.n	8003c8e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 ff60 	bl	8005b4c <USB_InitFSLSPClkSel>
 8003c8c:	e011      	b.n	8003cb2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 ff59 	bl	8005b4c <USB_InitFSLSPClkSel>
 8003c9a:	e00a      	b.n	8003cb2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	79db      	ldrb	r3, [r3, #7]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d106      	bne.n	8003cb2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003caa:	461a      	mov	r2, r3
 8003cac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003cb0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f004 ff30 	bl	8008b18 <HAL_HCD_PortEnabled_Callback>
 8003cb8:	e002      	b.n	8003cc0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f004 ff3a 	bl	8008b34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d103      	bne.n	8003cd2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f043 0320 	orr.w	r3, r3, #32
 8003cd0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6013      	str	r3, [r2, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e12b      	b.n	8003f52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd f9b6 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	@ 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f001 fa20 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4a81      	ldr	r2, [pc, #516]	@ (8003f5c <HAL_I2C_Init+0x274>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d807      	bhi.n	8003d6c <HAL_I2C_Init+0x84>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a80      	ldr	r2, [pc, #512]	@ (8003f60 <HAL_I2C_Init+0x278>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	bf94      	ite	ls
 8003d64:	2301      	movls	r3, #1
 8003d66:	2300      	movhi	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e006      	b.n	8003d7a <HAL_I2C_Init+0x92>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003f64 <HAL_I2C_Init+0x27c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0e7      	b.n	8003f52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a78      	ldr	r2, [pc, #480]	@ (8003f68 <HAL_I2C_Init+0x280>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9b      	lsrs	r3, r3, #18
 8003d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f5c <HAL_I2C_Init+0x274>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <HAL_I2C_Init+0xd4>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	e009      	b.n	8003dd0 <HAL_I2C_Init+0xe8>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4a69      	ldr	r2, [pc, #420]	@ (8003f6c <HAL_I2C_Init+0x284>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	3301      	adds	r3, #1
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003de2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	495c      	ldr	r1, [pc, #368]	@ (8003f5c <HAL_I2C_Init+0x274>)
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d819      	bhi.n	8003e24 <HAL_I2C_Init+0x13c>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e59      	subs	r1, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e04:	400b      	ands	r3, r1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_I2C_Init+0x138>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e59      	subs	r1, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	e051      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e04f      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d111      	bne.n	8003e50 <HAL_I2C_Init+0x168>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e012      	b.n	8003e76 <HAL_I2C_Init+0x18e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e58      	subs	r0, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	0099      	lsls	r1, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e66:	3301      	adds	r3, #1
 8003e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Init+0x196>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e022      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10e      	bne.n	8003ea4 <HAL_I2C_Init+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e58      	subs	r0, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	440b      	add	r3, r1
 8003e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea2:	e00f      	b.n	8003ec4 <HAL_I2C_Init+0x1dc>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1e58      	subs	r0, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	0099      	lsls	r1, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	6809      	ldr	r1, [r1, #0]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ef2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6911      	ldr	r1, [r2, #16]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	000186a0 	.word	0x000186a0
 8003f60:	001e847f 	.word	0x001e847f
 8003f64:	003d08ff 	.word	0x003d08ff
 8003f68:	431bde83 	.word	0x431bde83
 8003f6c:	10624dd3 	.word	0x10624dd3

08003f70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e128      	b.n	80041d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a90      	ldr	r2, [pc, #576]	@ (80041dc <HAL_I2S_Init+0x26c>)
 8003f9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd f8b7 	bl	8001110 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003fb8:	f023 030f 	bic.w	r3, r3, #15
 8003fbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d060      	beq.n	8004090 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e001      	b.n	8003fe0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d802      	bhi.n	8003fee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f001 f9c4 	bl	800537c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ff4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ffe:	d125      	bne.n	800404c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	3305      	adds	r3, #5
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e01f      	b.n	800406a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	fbb2 f2f3 	udiv	r2, r2, r3
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	3305      	adds	r3, #5
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e00e      	b.n	800406a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fbb2 f2f3 	udiv	r2, r2, r3
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	3305      	adds	r3, #5
 8004068:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4a5c      	ldr	r2, [pc, #368]	@ (80041e0 <HAL_I2S_Init+0x270>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	08db      	lsrs	r3, r3, #3
 8004074:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004090:	2302      	movs	r3, #2
 8004092:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d902      	bls.n	80040a4 <HAL_I2S_Init+0x134>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2bff      	cmp	r3, #255	@ 0xff
 80040a2:	d907      	bls.n	80040b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	f043 0210 	orr.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e08f      	b.n	80041d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	ea42 0103 	orr.w	r1, r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040d2:	f023 030f 	bic.w	r3, r3, #15
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6851      	ldr	r1, [r2, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68d2      	ldr	r2, [r2, #12]
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6992      	ldr	r2, [r2, #24]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d161      	bne.n	80041c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <HAL_I2S_Init+0x274>)
 8004104:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a37      	ldr	r2, [pc, #220]	@ (80041e8 <HAL_I2S_Init+0x278>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_I2S_Init+0x1a4>
 8004110:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <HAL_I2S_Init+0x27c>)
 8004112:	e001      	b.n	8004118 <HAL_I2S_Init+0x1a8>
 8004114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4932      	ldr	r1, [pc, #200]	@ (80041e8 <HAL_I2S_Init+0x278>)
 8004120:	428a      	cmp	r2, r1
 8004122:	d101      	bne.n	8004128 <HAL_I2S_Init+0x1b8>
 8004124:	4a31      	ldr	r2, [pc, #196]	@ (80041ec <HAL_I2S_Init+0x27c>)
 8004126:	e001      	b.n	800412c <HAL_I2S_Init+0x1bc>
 8004128:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800412c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004130:	f023 030f 	bic.w	r3, r3, #15
 8004134:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2b      	ldr	r2, [pc, #172]	@ (80041e8 <HAL_I2S_Init+0x278>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_I2S_Init+0x1d4>
 8004140:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <HAL_I2S_Init+0x27c>)
 8004142:	e001      	b.n	8004148 <HAL_I2S_Init+0x1d8>
 8004144:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004148:	2202      	movs	r2, #2
 800414a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a25      	ldr	r2, [pc, #148]	@ (80041e8 <HAL_I2S_Init+0x278>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_I2S_Init+0x1ea>
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_I2S_Init+0x27c>)
 8004158:	e001      	b.n	800415e <HAL_I2S_Init+0x1ee>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800416a:	d003      	beq.n	8004174 <HAL_I2S_Init+0x204>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e001      	b.n	8004180 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004194:	4313      	orrs	r3, r2
 8004196:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800419e:	4313      	orrs	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80041ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <HAL_I2S_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_I2S_Init+0x24c>
 80041b8:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_I2S_Init+0x27c>)
 80041ba:	e001      	b.n	80041c0 <HAL_I2S_Init+0x250>
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c0:	897a      	ldrh	r2, [r7, #10]
 80041c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	080042e7 	.word	0x080042e7
 80041e0:	cccccccd 	.word	0xcccccccd
 80041e4:	080043fd 	.word	0x080043fd
 80041e8:	40003800 	.word	0x40003800
 80041ec:	40003400 	.word	0x40003400

080041f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004270:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ffb8 	bl	80041f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	b292      	uxth	r2, r2
 800429c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10e      	bne.n	80042de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff93 	bl	8004204 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d13a      	bne.n	8004378 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d109      	bne.n	8004320 <I2S_IRQHandler+0x3a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d102      	bne.n	8004320 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ffb4 	bl	8004288 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d126      	bne.n	8004378 <I2S_IRQHandler+0x92>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d11f      	bne.n	8004378 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004346:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ff50 	bl	8004218 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d136      	bne.n	80043f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d109      	bne.n	80043a2 <I2S_IRQHandler+0xbc>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b80      	cmp	r3, #128	@ 0x80
 800439a:	d102      	bne.n	80043a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff45 	bl	800422c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d122      	bne.n	80043f2 <I2S_IRQHandler+0x10c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d11b      	bne.n	80043f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e4:	f043 0204 	orr.w	r2, r3, #4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff13 	bl	8004218 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a92      	ldr	r2, [pc, #584]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004416:	4b92      	ldr	r3, [pc, #584]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004418:	e001      	b.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800441a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a8b      	ldr	r2, [pc, #556]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004434:	4b8a      	ldr	r3, [pc, #552]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004436:	e001      	b.n	800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004438:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004448:	d004      	beq.n	8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 8099 	bne.w	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f925 	bl	80046b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9c8 	bl	8004818 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d13a      	bne.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d035      	beq.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6e      	ldr	r2, [pc, #440]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80044a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044a8:	e001      	b.n	80044ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80044aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4969      	ldr	r1, [pc, #420]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044b6:	428b      	cmp	r3, r1
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80044ba:	4b69      	ldr	r3, [pc, #420]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	f043 0202 	orr.w	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fe88 	bl	8004218 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	f040 80c3 	bne.w	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80bd 	beq.w	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800452e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a49      	ldr	r2, [pc, #292]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800453a:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800453c:	e001      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4944      	ldr	r1, [pc, #272]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800454a:	428b      	cmp	r3, r1
 800454c:	d101      	bne.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800454e:	4b44      	ldr	r3, [pc, #272]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004550:	e001      	b.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004556:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800455a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fe4a 	bl	8004218 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004584:	e089      	b.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d107      	bne.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8be 	bl	800471c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8fd 	bl	80047b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	d12f      	bne.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d02a      	beq.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045ea:	e001      	b.n	80045f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4919      	ldr	r1, [pc, #100]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d101      	bne.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045fc:	4b18      	ldr	r3, [pc, #96]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045fe:	e001      	b.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004604:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004608:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fdfa 	bl	8004218 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d136      	bne.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d031      	beq.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a07      	ldr	r2, [pc, #28]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004644:	e001      	b.n	800464a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004646:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4902      	ldr	r1, [pc, #8]	@ (800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004652:	428b      	cmp	r3, r1
 8004654:	d106      	bne.n	8004664 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004656:	4b02      	ldr	r3, [pc, #8]	@ (8004660 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004658:	e006      	b.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800465a:	bf00      	nop
 800465c:	40003800 	.word	0x40003800
 8004660:	40003400 	.word	0x40003400
 8004664:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004668:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800466c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800467c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fdc0 	bl	8004218 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004698:	e000      	b.n	800469c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800469a:	bf00      	nop
}
 800469c:	bf00      	nop
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	1c99      	adds	r1, r3, #2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d113      	bne.n	8004712 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ffc9 	bl	80046a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	1c99      	adds	r1, r3, #2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6251      	str	r1, [r2, #36]	@ 0x24
 800472e:	8819      	ldrh	r1, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1d      	ldr	r2, [pc, #116]	@ (80047ac <I2SEx_TxISR_I2SExt+0x90>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <I2SEx_TxISR_I2SExt+0x22>
 800473a:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <I2SEx_TxISR_I2SExt+0x94>)
 800473c:	e001      	b.n	8004742 <I2SEx_TxISR_I2SExt+0x26>
 800473e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004742:	460a      	mov	r2, r1
 8004744:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d121      	bne.n	80047a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <I2SEx_TxISR_I2SExt+0x90>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <I2SEx_TxISR_I2SExt+0x50>
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <I2SEx_TxISR_I2SExt+0x94>)
 800476a:	e001      	b.n	8004770 <I2SEx_TxISR_I2SExt+0x54>
 800476c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	490d      	ldr	r1, [pc, #52]	@ (80047ac <I2SEx_TxISR_I2SExt+0x90>)
 8004778:	428b      	cmp	r3, r1
 800477a:	d101      	bne.n	8004780 <I2SEx_TxISR_I2SExt+0x64>
 800477c:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <I2SEx_TxISR_I2SExt+0x94>)
 800477e:	e001      	b.n	8004784 <I2SEx_TxISR_I2SExt+0x68>
 8004780:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004784:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004788:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ff81 	bl	80046a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40003400 	.word	0x40003400

080047b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68d8      	ldr	r0, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	1c99      	adds	r1, r3, #2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047cc:	b282      	uxth	r2, r0
 80047ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d113      	bne.n	8004810 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff ff4a 	bl	80046a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a20      	ldr	r2, [pc, #128]	@ (80048a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <I2SEx_RxISR_I2SExt+0x16>
 800482a:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <I2SEx_RxISR_I2SExt+0x94>)
 800482c:	e001      	b.n	8004832 <I2SEx_RxISR_I2SExt+0x1a>
 800482e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004832:	68d8      	ldr	r0, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	1c99      	adds	r1, r3, #2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800483e:	b282      	uxth	r2, r0
 8004840:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d121      	bne.n	800489e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <I2SEx_RxISR_I2SExt+0x50>
 8004864:	4b11      	ldr	r3, [pc, #68]	@ (80048ac <I2SEx_RxISR_I2SExt+0x94>)
 8004866:	e001      	b.n	800486c <I2SEx_RxISR_I2SExt+0x54>
 8004868:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	490d      	ldr	r1, [pc, #52]	@ (80048a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004874:	428b      	cmp	r3, r1
 8004876:	d101      	bne.n	800487c <I2SEx_RxISR_I2SExt+0x64>
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <I2SEx_RxISR_I2SExt+0x94>)
 800487a:	e001      	b.n	8004880 <I2SEx_RxISR_I2SExt+0x68>
 800487c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004880:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004884:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff03 	bl	80046a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40003800 	.word	0x40003800
 80048ac:	40003400 	.word	0x40003400

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e267      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d075      	beq.n	80049ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4b85      	ldr	r3, [pc, #532]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d112      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b82      	ldr	r3, [pc, #520]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f2:	d10b      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	4b7e      	ldr	r3, [pc, #504]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x108>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d157      	bne.n	80049b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e242      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x74>
 8004916:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a75      	ldr	r2, [pc, #468]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e01d      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x98>
 800492e:	4b70      	ldr	r3, [pc, #448]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6f      	ldr	r2, [pc, #444]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b6d      	ldr	r3, [pc, #436]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6c      	ldr	r2, [pc, #432]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e00b      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004948:	4b69      	ldr	r3, [pc, #420]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a68      	ldr	r2, [pc, #416]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 800494e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b66      	ldr	r3, [pc, #408]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a65      	ldr	r2, [pc, #404]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 800495a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800495e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d013      	beq.n	8004990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fc fdac 	bl	80014c4 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fc fda8 	bl	80014c4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	@ 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e207      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b5b      	ldr	r3, [pc, #364]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0xc0>
 800498e:	e014      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fc fd98 	bl	80014c4 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fc fd94 	bl	80014c4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	@ 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1f3      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	4b51      	ldr	r3, [pc, #324]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0xe8>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	4b4a      	ldr	r3, [pc, #296]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d11c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b44      	ldr	r3, [pc, #272]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e1c7      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a02:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4937      	ldr	r1, [pc, #220]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a16:	e03a      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a20:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <HAL_RCC_OscConfig+0x244>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fc fd4d 	bl	80014c4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2e:	f7fc fd49 	bl	80014c4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1a8      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4c:	4b28      	ldr	r3, [pc, #160]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4925      	ldr	r1, [pc, #148]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a62:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <HAL_RCC_OscConfig+0x244>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fc fd2c 	bl	80014c4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a70:	f7fc fd28 	bl	80014c4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e187      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d036      	beq.n	8004b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa2:	4b15      	ldr	r3, [pc, #84]	@ (8004af8 <HAL_RCC_OscConfig+0x248>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fd0c 	bl	80014c4 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fc fd08 	bl	80014c4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e167      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x200>
 8004ace:	e01b      	b.n	8004b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <HAL_RCC_OscConfig+0x248>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fc fcf5 	bl	80014c4 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	e00e      	b.n	8004afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fc fcf1 	bl	80014c4 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d907      	bls.n	8004afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e150      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	42470000 	.word	0x42470000
 8004af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afc:	4b88      	ldr	r3, [pc, #544]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ea      	bne.n	8004ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8097 	beq.w	8004c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1a:	4b81      	ldr	r3, [pc, #516]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b36:	4b7a      	ldr	r3, [pc, #488]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b46:	4b77      	ldr	r3, [pc, #476]	@ (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b52:	4b74      	ldr	r3, [pc, #464]	@ (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a73      	ldr	r2, [pc, #460]	@ (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fc fcb1 	bl	80014c4 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fc fcad 	bl	80014c4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e10c      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b6a      	ldr	r3, [pc, #424]	@ (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2ea>
 8004b8c:	4b64      	ldr	r3, [pc, #400]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a63      	ldr	r2, [pc, #396]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x324>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bae:	4b5c      	ldr	r3, [pc, #368]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x324>
 8004bbc:	4b58      	ldr	r3, [pc, #352]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	4a57      	ldr	r2, [pc, #348]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc8:	4b55      	ldr	r3, [pc, #340]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bce:	f023 0304 	bic.w	r3, r3, #4
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fc fc72 	bl	80014c4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fc fc6e 	bl	80014c4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0cb      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	4b49      	ldr	r3, [pc, #292]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ee      	beq.n	8004be4 <HAL_RCC_OscConfig+0x334>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c08:	f7fc fc5c 	bl	80014c4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fc fc58 	bl	80014c4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0b5      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	4b3e      	ldr	r3, [pc, #248]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ee      	bne.n	8004c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c38:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	4a38      	ldr	r2, [pc, #224]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a1 	beq.w	8004d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c4e:	4b34      	ldr	r3, [pc, #208]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d05c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d141      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c62:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc fc2c 	bl	80014c4 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fc fc28 	bl	80014c4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e087      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	491b      	ldr	r1, [pc, #108]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbe:	f7fc fc01 	bl	80014c4 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fc fbfd 	bl	80014c4 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e05c      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x416>
 8004ce4:	e054      	b.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	4b10      	ldr	r3, [pc, #64]	@ (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fc fbea 	bl	80014c4 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fc fbe6 	bl	80014c4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e045      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x444>
 8004d12:	e03d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e038      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d028      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d121      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d11a      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	3b01      	subs	r3, #1
 8004d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fc fb18 	bl	80014c4 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fc fb14 	bl	80014c4 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490a      	ldr	r1, [pc, #40]	@ (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc fa78 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	080091f0 	.word	0x080091f0
 8004f64:	20000000 	.word	0x20000000
 8004f68:	20000004 	.word	0x20000004

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f70:	b094      	sub	sp, #80	@ 0x50
 8004f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f84:	4b79      	ldr	r3, [pc, #484]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d00d      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x40>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	f200 80e1 	bhi.w	8005158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f9e:	e0db      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b73      	ldr	r3, [pc, #460]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004fa4:	e0db      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa6:	4b73      	ldr	r3, [pc, #460]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004faa:	e0d8      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fac:	4b6f      	ldr	r3, [pc, #444]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d063      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	0159      	lsls	r1, r3, #5
 8004fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff0:	0150      	lsls	r0, r2, #5
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	1a51      	subs	r1, r2, r1
 8004ffa:	6139      	str	r1, [r7, #16]
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005010:	4659      	mov	r1, fp
 8005012:	018b      	lsls	r3, r1, #6
 8005014:	4651      	mov	r1, sl
 8005016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501a:	4651      	mov	r1, sl
 800501c:	018a      	lsls	r2, r1, #6
 800501e:	4651      	mov	r1, sl
 8005020:	ebb2 0801 	subs.w	r8, r2, r1
 8005024:	4659      	mov	r1, fp
 8005026:	eb63 0901 	sbc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	462b      	mov	r3, r5
 800504c:	eb49 0303 	adc.w	r3, r9, r3
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800505e:	4629      	mov	r1, r5
 8005060:	024b      	lsls	r3, r1, #9
 8005062:	4621      	mov	r1, r4
 8005064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005068:	4621      	mov	r1, r4
 800506a:	024a      	lsls	r2, r1, #9
 800506c:	4610      	mov	r0, r2
 800506e:	4619      	mov	r1, r3
 8005070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005072:	2200      	movs	r2, #0
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800507c:	f7fb f8a4 	bl	80001c8 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4613      	mov	r3, r2
 8005086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005088:	e058      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508a:	4b38      	ldr	r3, [pc, #224]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	099b      	lsrs	r3, r3, #6
 8005090:	2200      	movs	r2, #0
 8005092:	4618      	mov	r0, r3
 8005094:	4611      	mov	r1, r2
 8005096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	f04f 0000 	mov.w	r0, #0
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	0159      	lsls	r1, r3, #5
 80050b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b6:	0150      	lsls	r0, r2, #5
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4641      	mov	r1, r8
 80050be:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050dc:	ebb2 040a 	subs.w	r4, r2, sl
 80050e0:	eb63 050b 	sbc.w	r5, r3, fp
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	00eb      	lsls	r3, r5, #3
 80050ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	4614      	mov	r4, r2
 80050f6:	461d      	mov	r5, r3
 80050f8:	4643      	mov	r3, r8
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	464b      	mov	r3, r9
 8005100:	eb45 0303 	adc.w	r3, r5, r3
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005112:	4629      	mov	r1, r5
 8005114:	028b      	lsls	r3, r1, #10
 8005116:	4621      	mov	r1, r4
 8005118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800511c:	4621      	mov	r1, r4
 800511e:	028a      	lsls	r2, r1, #10
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005126:	2200      	movs	r2, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005130:	f7fb f84a 	bl	80001c8 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4613      	mov	r3, r2
 800513a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	3301      	adds	r3, #1
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800514c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005156:	e002      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x204>)
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800515c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800515e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005160:	4618      	mov	r0, r3
 8005162:	3750      	adds	r7, #80	@ 0x50
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	00f42400 	.word	0x00f42400
 8005174:	007a1200 	.word	0x007a1200

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800517c:	4b03      	ldr	r3, [pc, #12]	@ (800518c <HAL_RCC_GetHCLKFreq+0x14>)
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000000 	.word	0x20000000

08005190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005194:	f7ff fff0 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	0a9b      	lsrs	r3, r3, #10
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	@ (80051b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08009200 	.word	0x08009200

080051b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d035      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e0:	4b62      	ldr	r3, [pc, #392]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fc f96d 	bl	80014c4 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ee:	f7fc f969 	bl	80014c4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e0b0      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005200:	4b5b      	ldr	r3, [pc, #364]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	071b      	lsls	r3, r3, #28
 8005218:	4955      	ldr	r1, [pc, #340]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005220:	4b52      	ldr	r3, [pc, #328]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005226:	f7fc f94d 	bl	80014c4 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800522e:	f7fc f949 	bl	80014c4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e090      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8083 	beq.w	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	4a43      	ldr	r2, [pc, #268]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	@ 0x40
 800526a:	4b41      	ldr	r3, [pc, #260]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005276:	4b3f      	ldr	r3, [pc, #252]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a3e      	ldr	r2, [pc, #248]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800527c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005282:	f7fc f91f 	bl	80014c4 <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005288:	e008      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800528a:	f7fc f91b 	bl	80014c4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e062      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800529c:	4b35      	ldr	r3, [pc, #212]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052a8:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02f      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d028      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d0:	4b29      	ldr	r3, [pc, #164]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d6:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052dc:	4a24      	ldr	r2, [pc, #144]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052e2:	4b23      	ldr	r3, [pc, #140]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d114      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052ee:	f7fc f8e9 	bl	80014c4 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7fc f8e5 	bl	80014c4 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e02a      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	4b18      	ldr	r3, [pc, #96]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ee      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005320:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005324:	d10d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005326:	4b12      	ldr	r3, [pc, #72]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533a:	490d      	ldr	r1, [pc, #52]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]
 8005340:	e005      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005342:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4a0a      	ldr	r2, [pc, #40]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005348:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	4b08      	ldr	r3, [pc, #32]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005350:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800535a:	4905      	ldr	r1, [pc, #20]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	42470068 	.word	0x42470068
 8005370:	40023800 	.word	0x40023800
 8005374:	40007000 	.word	0x40007000
 8005378:	42470e40 	.word	0x42470e40

0800537c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d13f      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800539a:	4b24      	ldr	r3, [pc, #144]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d006      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b0:	d12f      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053b4:	617b      	str	r3, [r7, #20]
          break;
 80053b6:	e02f      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053b8:	4b1c      	ldr	r3, [pc, #112]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c4:	d108      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053c6:	4b19      	ldr	r3, [pc, #100]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ce:	4a19      	ldr	r2, [pc, #100]	@ (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e007      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053d8:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e0:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053e8:	4b10      	ldr	r3, [pc, #64]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053fc:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005402:	0f1b      	lsrs	r3, r3, #28
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	617b      	str	r3, [r7, #20]
          break;
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
          break;
 8005416:	bf00      	nop
        }
      }
      break;
 8005418:	e000      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800541a:	bf00      	nop
    }
  }
  return frequency;
 800541c:	697b      	ldr	r3, [r7, #20]
}
 800541e:	4618      	mov	r0, r3
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800
 8005430:	00bb8000 	.word	0x00bb8000
 8005434:	007a1200 	.word	0x007a1200
 8005438:	00f42400 	.word	0x00f42400

0800543c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e07b      	b.n	8005546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545e:	d009      	beq.n	8005474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	61da      	str	r2, [r3, #28]
 8005466:	e005      	b.n	8005474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb febe 	bl	8001210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f8:	ea42 0103 	orr.w	r1, r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0104 	and.w	r1, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0210 	and.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800554e:	b084      	sub	sp, #16
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	f107 001c 	add.w	r0, r7, #28
 800555c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005560:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005564:	2b01      	cmp	r3, #1
 8005566:	d123      	bne.n	80055b0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005590:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9dc 	bl	8005962 <USB_CoreReset>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e01b      	b.n	80055e8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f9d0 	bl	8005962 <USB_CoreReset>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80055da:	e005      	b.n	80055e8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10b      	bne.n	8005606 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f043 0206 	orr.w	r2, r3, #6
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005612:	b004      	add	sp, #16
 8005614:	4770      	bx	lr

08005616 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f043 0201 	orr.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f023 0201 	bic.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d115      	bne.n	80056a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005688:	200a      	movs	r0, #10
 800568a:	f7fb ff27 	bl	80014dc <HAL_Delay>
      ms += 10U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	330a      	adds	r3, #10
 8005692:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f956 	bl	8005946 <USB_GetMode>
 800569a:	4603      	mov	r3, r0
 800569c:	2b01      	cmp	r3, #1
 800569e:	d01e      	beq.n	80056de <USB_SetCurrentMode+0x84>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80056a4:	d9f0      	bls.n	8005688 <USB_SetCurrentMode+0x2e>
 80056a6:	e01a      	b.n	80056de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d115      	bne.n	80056da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ba:	200a      	movs	r0, #10
 80056bc:	f7fb ff0e 	bl	80014dc <HAL_Delay>
      ms += 10U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	330a      	adds	r3, #10
 80056c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f93d 	bl	8005946 <USB_GetMode>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <USB_SetCurrentMode+0x84>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80056d6:	d9f0      	bls.n	80056ba <USB_SetCurrentMode+0x60>
 80056d8:	e001      	b.n	80056de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e005      	b.n	80056ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80056e2:	d101      	bne.n	80056e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800570c:	d901      	bls.n	8005712 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e01b      	b.n	800574a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	daf2      	bge.n	8005700 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005736:	d901      	bls.n	800573c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e006      	b.n	800574a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b20      	cmp	r3, #32
 8005746:	d0f0      	beq.n	800572a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576e:	d901      	bls.n	8005774 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e018      	b.n	80057a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	daf2      	bge.n	8005762 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2210      	movs	r2, #16
 8005784:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005792:	d901      	bls.n	8005798 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d0f0      	beq.n	8005786 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b089      	sub	sp, #36	@ 0x24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	4611      	mov	r1, r2
 80057be:	461a      	mov	r2, r3
 80057c0:	460b      	mov	r3, r1
 80057c2:	71fb      	strb	r3, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d123      	bne.n	8005820 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057d8:	88bb      	ldrh	r3, [r7, #4]
 80057da:	3303      	adds	r3, #3
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e018      	b.n	8005818 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	031a      	lsls	r2, r3, #12
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f2:	461a      	mov	r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	3301      	adds	r3, #1
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	429a      	cmp	r2, r3
 800581e:	d3e2      	bcc.n	80057e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3724      	adds	r7, #36	@ 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800582e:	b480      	push	{r7}
 8005830:	b08b      	sub	sp, #44	@ 0x2c
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	4613      	mov	r3, r2
 800583a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	b29b      	uxth	r3, r3
 800584a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005854:	2300      	movs	r3, #0
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	e014      	b.n	8005884 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	601a      	str	r2, [r3, #0]
    pDest++;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	3301      	adds	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	3301      	adds	r3, #1
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3e6      	bcc.n	800585a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800588c:	8bfb      	ldrh	r3, [r7, #30]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01e      	beq.n	80058d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589c:	461a      	mov	r2, r3
 800589e:	f107 0310 	add.w	r3, r7, #16
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	fa22 f303 	lsr.w	r3, r2, r3
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	701a      	strb	r2, [r3, #0]
      i++;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	3301      	adds	r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
      pDest++;
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	3301      	adds	r3, #1
 80058c2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ea      	bne.n	80058a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	372c      	adds	r7, #44	@ 0x2c
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4013      	ands	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005938:	68bb      	ldr	r3, [r7, #8]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0301 	and.w	r3, r3, #1
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3301      	adds	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800597a:	d901      	bls.n	8005980 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e01b      	b.n	80059b8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	daf2      	bge.n	800596e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a4:	d901      	bls.n	80059aa <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e006      	b.n	80059b8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d0f0      	beq.n	8005998 <USB_CoreReset+0x36>

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d119      	bne.n	8005a4e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10a      	bne.n	8005a38 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e014      	b.n	8005a62 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a46:	f023 0304 	bic.w	r3, r3, #4
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	e009      	b.n	8005a62 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a62:	2110      	movs	r1, #16
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fe44 	bl	80056f2 <USB_FlushTxFifo>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fe6e 	bl	8005756 <USB_FlushRxFifo>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e015      	b.n	8005ab6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a96:	461a      	mov	r2, r3
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005aba:	461a      	mov	r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d3e3      	bcc.n	8005a8a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ace:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	@ (8005b34 <USB_HostInit+0x170>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10b      	bne.n	8005af0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ade:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	@ (8005b38 <USB_HostInit+0x174>)
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a14      	ldr	r2, [pc, #80]	@ (8005b3c <USB_HostInit+0x178>)
 8005aea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005aee:	e009      	b.n	8005b04 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a11      	ldr	r2, [pc, #68]	@ (8005b40 <USB_HostInit+0x17c>)
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <USB_HostInit+0x180>)
 8005b00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <USB_HostInit+0x184>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b30:	b004      	add	sp, #16
 8005b32:	4770      	bx	lr
 8005b34:	40040000 	.word	0x40040000
 8005b38:	01000200 	.word	0x01000200
 8005b3c:	00e00300 	.word	0x00e00300
 8005b40:	00600080 	.word	0x00600080
 8005b44:	004000e0 	.word	0x004000e0
 8005b48:	a3200008 	.word	0xa3200008

08005b4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b94:	461a      	mov	r2, r3
 8005b96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b9a:	6053      	str	r3, [r2, #4]
 8005b9c:	e00c      	b.n	8005bb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005baa:	461a      	mov	r2, r3
 8005bac:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	e001      	b.n	8005bb8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005be6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005bf6:	2064      	movs	r0, #100	@ 0x64
 8005bf8:	f7fb fc70 	bl	80014dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c08:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c0a:	200a      	movs	r0, #10
 8005c0c:	f7fb fc66 	bl	80014dc <HAL_Delay>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <USB_DriveVbus+0x44>
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d106      	bne.n	8005c5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c68:	d109      	bne.n	8005c7e <USB_DriveVbus+0x64>
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	0c5b      	lsrs	r3, r3, #17
 8005caa:	f003 0303 	and.w	r3, r3, #3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	b29b      	uxth	r3, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	70fb      	strb	r3, [r7, #3]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70bb      	strb	r3, [r7, #2]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d87c      	bhi.n	8005e14 <USB_HC_Init+0x138>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <USB_HC_Init+0x44>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005dd7 	.word	0x08005dd7
 8005d28:	08005d31 	.word	0x08005d31
 8005d2c:	08005d99 	.word	0x08005d99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005d42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da10      	bge.n	8005d6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d6c:	e055      	b.n	8005e1a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a6f      	ldr	r2, [pc, #444]	@ (8005f30 <USB_HC_Init+0x254>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d151      	bne.n	8005e1a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	78fa      	ldrb	r2, [r7, #3]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d94:	60d3      	str	r3, [r2, #12]
      break;
 8005d96:	e040      	b.n	8005e1a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	461a      	mov	r2, r3
 8005da6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005daa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da34      	bge.n	8005e1e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005dd4:	e023      	b.n	8005e1e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de2:	461a      	mov	r2, r3
 8005de4:	f240 2325 	movw	r3, #549	@ 0x225
 8005de8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da17      	bge.n	8005e22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	78fa      	ldrb	r2, [r7, #3]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e0c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005e10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e12:	e006      	b.n	8005e22 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
      break;
 8005e18:	e004      	b.n	8005e24 <USB_HC_Init+0x148>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <USB_HC_Init+0x148>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <USB_HC_Init+0x148>
      break;
 8005e22:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2101      	movs	r1, #1
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	6939      	ldr	r1, [r7, #16]
 8005e6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e70:	4313      	orrs	r3, r2
 8005e72:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da03      	bge.n	8005e90 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e001      	b.n	8005e94 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fef9 	bl	8005c8c <USB_GetHostSpeed>
 8005e9a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d106      	bne.n	8005eb2 <USB_HC_Init+0x1d6>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d003      	beq.n	8005eb2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005eaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e001      	b.n	8005eb6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eb6:	787b      	ldrb	r3, [r7, #1]
 8005eb8:	059b      	lsls	r3, r3, #22
 8005eba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ebe:	78bb      	ldrb	r3, [r7, #2]
 8005ec0:	02db      	lsls	r3, r3, #11
 8005ec2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ec6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ec8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ecc:	049b      	lsls	r3, r3, #18
 8005ece:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ed2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005ed4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005eda:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ef4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d003      	beq.n	8005f06 <USB_HC_Init+0x22a>
 8005efe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10f      	bne.n	8005f26 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40040000 	.word	0x40040000

08005f34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08c      	sub	sp, #48	@ 0x30
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005f4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f50:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a5d      	ldr	r2, [pc, #372]	@ (80060cc <USB_HC_StartXfer+0x198>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d12f      	bne.n	8005fba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11c      	bne.n	8005f9a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	7c9b      	ldrb	r3, [r3, #18]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <USB_HC_StartXfer+0x3c>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	7c9b      	ldrb	r3, [r3, #18]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d124      	bne.n	8005fba <USB_HC_StartXfer+0x86>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	799b      	ldrb	r3, [r3, #6]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d120      	bne.n	8005fba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	60d3      	str	r3, [r2, #12]
 8005f98:	e00f      	b.n	8005fba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	791b      	ldrb	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <USB_HC_StartXfer+0x86>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	795b      	ldrb	r3, [r3, #5]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	785b      	ldrb	r3, [r3, #1]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fb6b 	bl	800668c <USB_DoPing>
        return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e232      	b.n	8006420 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	799b      	ldrb	r3, [r3, #6]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d158      	bne.n	8006074 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	8a92      	ldrh	r2, [r2, #20]
 8005fd4:	fb03 f202 	mul.w	r2, r3, r2
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61da      	str	r2, [r3, #28]
 8005fdc:	e07c      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	7c9b      	ldrb	r3, [r3, #18]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d130      	bne.n	8006048 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	2bbc      	cmp	r3, #188	@ 0xbc
 8005fec:	d918      	bls.n	8006020 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	8a9b      	ldrh	r3, [r3, #20]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d003      	beq.n	8006010 <USB_HC_StartXfer+0xdc>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d103      	bne.n	8006018 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2202      	movs	r2, #2
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	e05f      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2201      	movs	r2, #1
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	e05b      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d007      	beq.n	8006040 <USB_HC_StartXfer+0x10c>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d003      	beq.n	8006040 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2204      	movs	r2, #4
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e04b      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2203      	movs	r2, #3
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	e047      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10d      	bne.n	800606a <USB_HC_StartXfer+0x136>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	8a92      	ldrh	r2, [r2, #20]
 8006056:	4293      	cmp	r3, r2
 8006058:	d907      	bls.n	800606a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800605a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	8a92      	ldrh	r2, [r2, #20]
 8006060:	fb03 f202 	mul.w	r2, r3, r2
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61da      	str	r2, [r3, #28]
 8006068:	e036      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	61da      	str	r2, [r3, #28]
 8006072:	e031      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d018      	beq.n	80060ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	8a92      	ldrh	r2, [r2, #20]
 8006084:	4413      	add	r3, r2
 8006086:	3b01      	subs	r3, #1
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	8a92      	ldrh	r2, [r2, #20]
 800608c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006090:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006092:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006094:	8b7b      	ldrh	r3, [r7, #26]
 8006096:	429a      	cmp	r2, r3
 8006098:	d90b      	bls.n	80060b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800609a:	8b7b      	ldrh	r3, [r7, #26]
 800609c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800609e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	8a92      	ldrh	r2, [r2, #20]
 80060a4:	fb03 f202 	mul.w	r2, r3, r2
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	61da      	str	r2, [r3, #28]
 80060ac:	e001      	b.n	80060b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80060ae:	2301      	movs	r3, #1
 80060b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	78db      	ldrb	r3, [r3, #3]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	8a92      	ldrh	r2, [r2, #20]
 80060c0:	fb03 f202 	mul.w	r2, r3, r2
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61da      	str	r2, [r3, #28]
 80060c8:	e006      	b.n	80060d8 <USB_HC_StartXfer+0x1a4>
 80060ca:	bf00      	nop
 80060cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060e2:	04d9      	lsls	r1, r3, #19
 80060e4:	4ba3      	ldr	r3, [pc, #652]	@ (8006374 <USB_HC_StartXfer+0x440>)
 80060e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	7d9b      	ldrb	r3, [r3, #22]
 80060ee:	075b      	lsls	r3, r3, #29
 80060f0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	0148      	lsls	r0, r1, #5
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	4401      	add	r1, r0
 80060fc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006100:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006102:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6999      	ldr	r1, [r3, #24]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611a:	460a      	mov	r2, r1
 800611c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	440a      	add	r2, r1
 800614c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006150:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006154:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	7e7b      	ldrb	r3, [r7, #25]
 8006166:	075b      	lsls	r3, r3, #29
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	0148      	lsls	r0, r1, #5
 800616c:	6a39      	ldr	r1, [r7, #32]
 800616e:	4401      	add	r1, r0
 8006170:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006174:	4313      	orrs	r3, r2
 8006176:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	799b      	ldrb	r3, [r3, #6]
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 80c3 	bne.w	8006308 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	7c5b      	ldrb	r3, [r3, #17]
 8006186:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800618c:	4313      	orrs	r3, r2
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	6a3a      	ldr	r2, [r7, #32]
 8006194:	440a      	add	r2, r1
 8006196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800619a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800619e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	6a3a      	ldr	r2, [r7, #32]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	79db      	ldrb	r3, [r3, #7]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d123      	bne.n	8006210 <USB_HC_StartXfer+0x2dc>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	78db      	ldrb	r3, [r3, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11f      	bne.n	8006210 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	6a3a      	ldr	r2, [r7, #32]
 8006204:	440a      	add	r2, r1
 8006206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800620a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800620e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	7c9b      	ldrb	r3, [r3, #18]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d003      	beq.n	8006220 <USB_HC_StartXfer+0x2ec>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	7c9b      	ldrb	r3, [r3, #18]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d117      	bne.n	8006250 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006224:	2b01      	cmp	r3, #1
 8006226:	d113      	bne.n	8006250 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	78db      	ldrb	r3, [r3, #3]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800624a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	7c9b      	ldrb	r3, [r3, #18]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d162      	bne.n	800631e <USB_HC_StartXfer+0x3ea>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	78db      	ldrb	r3, [r3, #3]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d15e      	bne.n	800631e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	3b01      	subs	r3, #1
 8006266:	2b03      	cmp	r3, #3
 8006268:	d858      	bhi.n	800631c <USB_HC_StartXfer+0x3e8>
 800626a:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <USB_HC_StartXfer+0x33c>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006281 	.word	0x08006281
 8006274:	080062a3 	.word	0x080062a3
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062e7 	.word	0x080062e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	6a3a      	ldr	r2, [r7, #32]
 8006294:	440a      	add	r2, r1
 8006296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800629a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800629e:	6053      	str	r3, [r2, #4]
          break;
 80062a0:	e03d      	b.n	800631e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062bc:	f043 030e 	orr.w	r3, r3, #14
 80062c0:	6053      	str	r3, [r2, #4]
          break;
 80062c2:	e02c      	b.n	800631e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062e2:	6053      	str	r3, [r2, #4]
          break;
 80062e4:	e01b      	b.n	800631e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006304:	6053      	str	r3, [r2, #4]
          break;
 8006306:	e00a      	b.n	800631e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6053      	str	r3, [r2, #4]
 800631a:	e000      	b.n	800631e <USB_HC_StartXfer+0x3ea>
          break;
 800631c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006334:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	78db      	ldrb	r3, [r3, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e003      	b.n	8006350 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800634e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006356:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006364:	461a      	mov	r2, r3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e055      	b.n	8006420 <USB_HC_StartXfer+0x4ec>
 8006374:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d14e      	bne.n	800641e <USB_HC_StartXfer+0x4ea>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d04a      	beq.n	800641e <USB_HC_StartXfer+0x4ea>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	79db      	ldrb	r3, [r3, #7]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d146      	bne.n	800641e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	7c9b      	ldrb	r3, [r3, #18]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d831      	bhi.n	80063fc <USB_HC_StartXfer+0x4c8>
 8006398:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <USB_HC_StartXfer+0x46c>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063b1 	.word	0x080063b1
 80063ac:	080063d5 	.word	0x080063d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	3303      	adds	r3, #3
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063ba:	8afa      	ldrh	r2, [r7, #22]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d91c      	bls.n	8006400 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063d2:	e015      	b.n	8006400 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	3303      	adds	r3, #3
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063de:	8afa      	ldrh	r2, [r7, #22]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d90a      	bls.n	8006404 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063fa:	e003      	b.n	8006404 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <USB_HC_StartXfer+0x4d2>
        break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <USB_HC_StartXfer+0x4d2>
        break;
 8006404:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6999      	ldr	r1, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	785a      	ldrb	r2, [r3, #1]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	b29b      	uxth	r3, r3
 8006414:	2000      	movs	r0, #0
 8006416:	9000      	str	r0, [sp, #0]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff f9ca 	bl	80057b2 <USB_WritePacket>
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3728      	adds	r7, #40	@ 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	b29b      	uxth	r3, r3
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800644a:	b480      	push	{r7}
 800644c:	b089      	sub	sp, #36	@ 0x24
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	0c9b      	lsrs	r3, r3, #18
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	0fdb      	lsrs	r3, r3, #31
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	0fdb      	lsrs	r3, r3, #31
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d10d      	bne.n	80064cc <USB_HC_Halt+0x82>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <USB_HC_Halt+0x82>
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d002      	beq.n	80064c8 <USB_HC_Halt+0x7e>
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d101      	bne.n	80064cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e0d8      	b.n	800667e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <USB_HC_Halt+0x8e>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d173      	bne.n	80065c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d14a      	bne.n	800659a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d133      	bne.n	8006578 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800652a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800652e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800654e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3301      	adds	r3, #1
 8006554:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800655c:	d82e      	bhi.n	80065bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006574:	d0ec      	beq.n	8006550 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006576:	e081      	b.n	800667c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006596:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006598:	e070      	b.n	800667c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ba:	e05f      	b.n	800667c <USB_HC_Halt+0x232>
            break;
 80065bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065be:	e05d      	b.n	800667c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d133      	bne.n	8006658 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	440a      	add	r2, r1
 8006606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800660a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800660e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800662a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800662e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	3301      	adds	r3, #1
 8006634:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800663c:	d81d      	bhi.n	800667a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006654:	d0ec      	beq.n	8006630 <USB_HC_Halt+0x1e6>
 8006656:	e011      	b.n	800667c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006672:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e000      	b.n	800667c <USB_HC_Halt+0x232>
          break;
 800667a:	bf00      	nop
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3724      	adds	r7, #36	@ 0x24
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066a0:	2301      	movs	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	04da      	lsls	r2, r3, #19
 80066a8:	4b15      	ldr	r3, [pc, #84]	@ (8006700 <USB_DoPing+0x74>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	1ff80000 	.word	0x1ff80000

08006704 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe ff8d 	bl	8005638 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800671e:	2110      	movs	r1, #16
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe ffe6 	bl	80056f2 <USB_FlushTxFifo>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff f810 	bl	8005756 <USB_FlushRxFifo>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	e01f      	b.n	8006786 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800675c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800676c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677a:	461a      	mov	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	3301      	adds	r3, #1
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d9dc      	bls.n	8006746 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e034      	b.n	80067fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c6:	461a      	mov	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067d8:	d80c      	bhi.n	80067f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067f0:	d0ec      	beq.n	80067cc <USB_StopHost+0xc8>
 80067f2:	e000      	b.n	80067f6 <USB_StopHost+0xf2>
        break;
 80067f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	3301      	adds	r3, #1
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d9c7      	bls.n	8006792 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fe fefc 	bl	8005616 <USB_EnableGlobalInt>

  return ret;
 800681e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b089      	sub	sp, #36	@ 0x24
 800682c:	af04      	add	r7, sp, #16
 800682e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006830:	2301      	movs	r3, #1
 8006832:	2202      	movs	r2, #2
 8006834:	2102      	movs	r1, #2
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc85 	bl	8007146 <USBH_FindInterface>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2bff      	cmp	r3, #255	@ 0xff
 8006844:	d002      	beq.n	800684c <USBH_CDC_InterfaceInit+0x24>
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d901      	bls.n	8006850 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800684c:	2302      	movs	r3, #2
 800684e:	e13d      	b.n	8006acc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fc5a 	bl	800710e <USBH_SelectInterface>
 800685a:	4603      	mov	r3, r0
 800685c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e131      	b.n	8006acc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800686e:	2050      	movs	r0, #80	@ 0x50
 8006870:	f002 fb64 	bl	8008f3c <malloc>
 8006874:	4603      	mov	r3, r0
 8006876:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006888:	2302      	movs	r3, #2
 800688a:	e11f      	b.n	8006acc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800688c:	2250      	movs	r2, #80	@ 0x50
 800688e:	2100      	movs	r1, #0
 8006890:	68b8      	ldr	r0, [r7, #8]
 8006892:	f002 fc11 	bl	80090b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da15      	bge.n	80068da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	211a      	movs	r1, #26
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 ffbe 	bl	8008862 <USBH_AllocPipe>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	7819      	ldrb	r1, [r3, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	7858      	ldrb	r0, [r3, #1]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	8952      	ldrh	r2, [r2, #10]
 8006906:	9202      	str	r2, [sp, #8]
 8006908:	2203      	movs	r2, #3
 800690a:	9201      	str	r2, [sp, #4]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4623      	mov	r3, r4
 8006910:	4602      	mov	r2, r0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 ff76 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 fa85 	bl	8008e30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006926:	2300      	movs	r3, #0
 8006928:	2200      	movs	r2, #0
 800692a:	210a      	movs	r1, #10
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fc0a 	bl	8007146 <USBH_FindInterface>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2bff      	cmp	r3, #255	@ 0xff
 800693a:	d002      	beq.n	8006942 <USBH_CDC_InterfaceInit+0x11a>
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d901      	bls.n	8006946 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006942:	2302      	movs	r3, #2
 8006944:	e0c2      	b.n	8006acc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b25b      	sxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	da16      	bge.n	800698c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	211a      	movs	r1, #26
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	4413      	add	r3, r2
 800696a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800696e:	781a      	ldrb	r2, [r3, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	211a      	movs	r1, #26
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006984:	881a      	ldrh	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	835a      	strh	r2, [r3, #26]
 800698a:	e015      	b.n	80069b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	211a      	movs	r1, #26
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	211a      	movs	r1, #26
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069b2:	881a      	ldrh	r2, [r3, #0]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da16      	bge.n	80069fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	211a      	movs	r1, #26
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	211a      	movs	r1, #26
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80069f6:	881a      	ldrh	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	835a      	strh	r2, [r3, #26]
 80069fc:	e015      	b.n	8006a2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	211a      	movs	r1, #26
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	211a      	movs	r1, #26
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	7b9b      	ldrb	r3, [r3, #14]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 ff16 	bl	8008862 <USBH_AllocPipe>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	7bdb      	ldrb	r3, [r3, #15]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 ff0c 	bl	8008862 <USBH_AllocPipe>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b59      	ldrb	r1, [r3, #13]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7b98      	ldrb	r0, [r3, #14]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	8b12      	ldrh	r2, [r2, #24]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	4623      	mov	r3, r4
 8006a74:	4602      	mov	r2, r0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fec4 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	7b19      	ldrb	r1, [r3, #12]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	7bd8      	ldrb	r0, [r3, #15]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	8b52      	ldrh	r2, [r2, #26]
 8006a94:	9202      	str	r2, [sp, #8]
 8006a96:	2202      	movs	r2, #2
 8006a98:	9201      	str	r2, [sp, #4]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4623      	mov	r3, r4
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 feaf 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7b5b      	ldrb	r3, [r3, #13]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 f9ba 	bl	8008e30 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	7b1b      	ldrb	r3, [r3, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 f9b3 	bl	8008e30 <USBH_LL_SetToggle>

  return USBH_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}

08006ad4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fea4 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fecf 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	7b1b      	ldrb	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	7b1b      	ldrb	r3, [r3, #12]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fe91 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7b1b      	ldrb	r3, [r3, #12]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 febc 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	7b5b      	ldrb	r3, [r3, #13]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	7b5b      	ldrb	r3, [r3, #13]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fe7e 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7b5b      	ldrb	r3, [r3, #13]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fea9 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f002 f9ed 	bl	8008f4c <free>
    phost->pActiveClass->pData = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b78:	2200      	movs	r2, #0
 8006b7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3340      	adds	r3, #64	@ 0x40
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f8b1 	bl	8006d06 <GetLineCoding>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bba:	7afb      	ldrb	r3, [r7, #11]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d877      	bhi.n	8006cd8 <USBH_CDC_Process+0x114>
 8006be8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <USBH_CDC_Process+0x2c>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c05 	.word	0x08006c05
 8006bf4:	08006c0b 	.word	0x08006c0b
 8006bf8:	08006c3b 	.word	0x08006c3b
 8006bfc:	08006caf 	.word	0x08006caf
 8006c00:	08006cbd 	.word	0x08006cbd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
      break;
 8006c08:	e06d      	b.n	8006ce6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f897 	bl	8006d44 <SetLineCoding>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c28:	e058      	b.n	8006cdc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d055      	beq.n	8006cdc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2204      	movs	r2, #4
 8006c34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006c38:	e050      	b.n	8006cdc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3340      	adds	r3, #64	@ 0x40
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f860 	bl	8006d06 <GetLineCoding>
 8006c46:	4603      	mov	r3, r0
 8006c48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d126      	bne.n	8006c9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c62:	791b      	ldrb	r3, [r3, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d13b      	bne.n	8006ce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d133      	bne.n	8006ce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d12b      	bne.n	8006ce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d124      	bne.n	8006ce0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f958 	bl	8006f4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c9c:	e020      	b.n	8006ce0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d01d      	beq.n	8006ce0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006cac:	e018      	b.n	8006ce0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f867 	bl	8006d82 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f8da 	bl	8006e6e <CDC_ProcessReception>
      break;
 8006cba:	e014      	b.n	8006ce6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 f81a 	bl	8007cf8 <USBH_ClrFeature>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006cd6:	e005      	b.n	8006ce4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006cd8:	bf00      	nop
 8006cda:	e004      	b.n	8006ce6 <USBH_CDC_Process+0x122>
      break;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <USBH_CDC_Process+0x122>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <USBH_CDC_Process+0x122>
      break;
 8006ce4:	bf00      	nop

  }

  return status;
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	22a1      	movs	r2, #161	@ 0xa1
 8006d14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2221      	movs	r2, #33	@ 0x21
 8006d1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2207      	movs	r2, #7
 8006d2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2207      	movs	r2, #7
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fb14 	bl	8008362 <USBH_CtlReq>
 8006d3a:	4603      	mov	r3, r0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2221      	movs	r2, #33	@ 0x21
 8006d52:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2207      	movs	r2, #7
 8006d6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2207      	movs	r2, #7
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 faf5 	bl	8008362 <USBH_CtlReq>
 8006d78:	4603      	mov	r3, r0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af02      	add	r7, sp, #8
 8006d88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d002      	beq.n	8006da8 <CDC_ProcessTransmission+0x26>
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d023      	beq.n	8006dee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006da6:	e05e      	b.n	8006e66 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	8b12      	ldrh	r2, [r2, #24]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d90b      	bls.n	8006dcc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	69d9      	ldr	r1, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8b1a      	ldrh	r2, [r3, #24]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7b5b      	ldrb	r3, [r3, #13]
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	9000      	str	r0, [sp, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fcda 	bl	800877e <USBH_BulkSendData>
 8006dca:	e00b      	b.n	8006de4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	7b5b      	ldrb	r3, [r3, #13]
 8006dda:	2001      	movs	r0, #1
 8006ddc:	9000      	str	r0, [sp, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fccd 	bl	800877e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006dec:	e03b      	b.n	8006e66 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	7b5b      	ldrb	r3, [r3, #13]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fff1 	bl	8008ddc <USBH_LL_GetURBState>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d128      	bne.n	8006e56 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	8b12      	ldrh	r2, [r2, #24]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d90e      	bls.n	8006e2e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	8b12      	ldrh	r2, [r2, #24]
 8006e18:	1a9a      	subs	r2, r3, r2
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	8b12      	ldrh	r2, [r2, #24]
 8006e26:	441a      	add	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	61da      	str	r2, [r3, #28]
 8006e2c:	e002      	b.n	8006e34 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e44:	e00e      	b.n	8006e64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f868 	bl	8006f24 <USBH_CDC_TransmitCallback>
      break;
 8006e54:	e006      	b.n	8006e64 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d103      	bne.n	8006e64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e64:	bf00      	nop
  }
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d002      	beq.n	8006e94 <CDC_ProcessReception+0x26>
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d00e      	beq.n	8006eb0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e92:	e043      	b.n	8006f1c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6a19      	ldr	r1, [r3, #32]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	8b5a      	ldrh	r2, [r3, #26]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc91 	bl	80087c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006eae:	e035      	b.n	8006f1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 ff90 	bl	8008ddc <USBH_LL_GetURBState>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ec0:	7cfb      	ldrb	r3, [r7, #19]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d129      	bne.n	8006f1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	7b1b      	ldrb	r3, [r3, #12]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fef3 	bl	8008cb8 <USBH_LL_GetLastXferSize>
 8006ed2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d016      	beq.n	8006f0c <CDC_ProcessReception+0x9e>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	8b5b      	ldrh	r3, [r3, #26]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d910      	bls.n	8006f0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad2      	subs	r2, r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	441a      	add	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2203      	movs	r2, #3
 8006f06:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f0a:	e006      	b.n	8006f1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f80f 	bl	8006f38 <USBH_CDC_ReceiveCallback>
      break;
 8006f1a:	bf00      	nop
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f74:	2302      	movs	r3, #2
 8006f76:	e029      	b.n	8006fcc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	79fa      	ldrb	r2, [r7, #7]
 8006f7c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 f81f 	bl	8006fd4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f001 fdc3 	bl	8008b50 <USBH_LL_Init>

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e009      	b.n	8006ffa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	33e0      	adds	r3, #224	@ 0xe0
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b0f      	cmp	r3, #15
 8006ffe:	d9f2      	bls.n	8006fe6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e009      	b.n	800701a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007020:	d3f1      	bcc.n	8007006 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2240      	movs	r2, #64	@ 0x40
 8007046:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	331c      	adds	r3, #28
 8007072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f002 f81d 	bl	80090b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f002 f814 	bl	80090b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007096:	2212      	movs	r2, #18
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f002 f80c 	bl	80090b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80070a6:	223e      	movs	r2, #62	@ 0x3e
 80070a8:	2100      	movs	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f002 f804 	bl	80090b8 <memset>

  return USBH_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10e      	bne.n	80070f6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	33de      	adds	r3, #222	@ 0xde
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e004      	b.n	8007100 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e001      	b.n	8007100 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070fc:	2302      	movs	r3, #2
 80070fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	429a      	cmp	r2, r3
 8007128:	d204      	bcs.n	8007134 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007132:	e001      	b.n	8007138 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007146:	b480      	push	{r7}
 8007148:	b087      	sub	sp, #28
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	461a      	mov	r2, r3
 8007154:	4603      	mov	r3, r0
 8007156:	70fb      	strb	r3, [r7, #3]
 8007158:	460b      	mov	r3, r1
 800715a:	70bb      	strb	r3, [r7, #2]
 800715c:	4613      	mov	r3, r2
 800715e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800716e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007170:	e025      	b.n	80071be <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	221a      	movs	r2, #26
 8007176:	fb02 f303 	mul.w	r3, r2, r3
 800717a:	3308      	adds	r3, #8
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	3302      	adds	r3, #2
 8007182:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	795b      	ldrb	r3, [r3, #5]
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	429a      	cmp	r2, r3
 800718c:	d002      	beq.n	8007194 <USBH_FindInterface+0x4e>
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2bff      	cmp	r3, #255	@ 0xff
 8007192:	d111      	bne.n	80071b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007198:	78ba      	ldrb	r2, [r7, #2]
 800719a:	429a      	cmp	r2, r3
 800719c:	d002      	beq.n	80071a4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800719e:	78bb      	ldrb	r3, [r7, #2]
 80071a0:	2bff      	cmp	r3, #255	@ 0xff
 80071a2:	d109      	bne.n	80071b8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071a8:	787a      	ldrb	r2, [r7, #1]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d002      	beq.n	80071b4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071ae:	787b      	ldrb	r3, [r7, #1]
 80071b0:	2bff      	cmp	r3, #255	@ 0xff
 80071b2:	d101      	bne.n	80071b8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	e006      	b.n	80071c6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	3301      	adds	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d9d6      	bls.n	8007172 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071c4:	23ff      	movs	r3, #255	@ 0xff
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fcf4 	bl	8008bc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071e0:	2101      	movs	r1, #1
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fe0d 	bl	8008e02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071fc:	2302      	movs	r3, #2
 80071fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d102      	bne.n	8007216 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2203      	movs	r2, #3
 8007214:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b0b      	cmp	r3, #11
 800721e:	f200 81bb 	bhi.w	8007598 <USBH_Process+0x3a4>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <USBH_Process+0x34>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007259 	.word	0x08007259
 800722c:	0800728b 	.word	0x0800728b
 8007230:	080072f3 	.word	0x080072f3
 8007234:	08007533 	.word	0x08007533
 8007238:	08007599 	.word	0x08007599
 800723c:	08007393 	.word	0x08007393
 8007240:	080074d9 	.word	0x080074d9
 8007244:	080073c9 	.word	0x080073c9
 8007248:	080073e9 	.word	0x080073e9
 800724c:	08007407 	.word	0x08007407
 8007250:	0800744b 	.word	0x0800744b
 8007254:	0800751b 	.word	0x0800751b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 819b 	beq.w	800759c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800726c:	20c8      	movs	r0, #200	@ 0xc8
 800726e:	f001 fe12 	bl	8008e96 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fd05 	bl	8008c82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007288:	e188      	b.n	800759c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007290:	2b01      	cmp	r3, #1
 8007292:	d107      	bne.n	80072a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072a2:	e18a      	b.n	80075ba <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80072aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072ae:	d914      	bls.n	80072da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d903      	bls.n	80072d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	220d      	movs	r2, #13
 80072ce:	701a      	strb	r2, [r3, #0]
      break;
 80072d0:	e173      	b.n	80075ba <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	701a      	strb	r2, [r3, #0]
      break;
 80072d8:	e16f      	b.n	80075ba <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80072e0:	f103 020a 	add.w	r2, r3, #10
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80072ea:	200a      	movs	r0, #10
 80072ec:	f001 fdd3 	bl	8008e96 <USBH_Delay>
      break;
 80072f0:	e163      	b.n	80075ba <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007302:	2104      	movs	r1, #4
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007308:	2064      	movs	r0, #100	@ 0x64
 800730a:	f001 fdc4 	bl	8008e96 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fc90 	bl	8008c34 <USBH_LL_GetSpeed>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2205      	movs	r2, #5
 8007322:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007324:	2100      	movs	r1, #0
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fa9b 	bl	8008862 <USBH_AllocPipe>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007334:	2180      	movs	r1, #128	@ 0x80
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fa93 	bl	8008862 <USBH_AllocPipe>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7919      	ldrb	r1, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	9201      	str	r2, [sp, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	4603      	mov	r3, r0
 8007362:	2280      	movs	r2, #128	@ 0x80
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fa4d 	bl	8008804 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7959      	ldrb	r1, [r3, #5]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800737e:	9202      	str	r2, [sp, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4603      	mov	r3, r0
 8007388:	2200      	movs	r2, #0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fa3a 	bl	8008804 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007390:	e113      	b.n	80075ba <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f916 	bl	80075c4 <USBH_HandleEnum>
 8007398:	4603      	mov	r3, r0
 800739a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 80fd 	bne.w	80075a0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d103      	bne.n	80073c0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2208      	movs	r2, #8
 80073bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073be:	e0ef      	b.n	80075a0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2207      	movs	r2, #7
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e0eb      	b.n	80075a0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80e8 	beq.w	80075a4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073da:	2101      	movs	r1, #1
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2208      	movs	r2, #8
 80073e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073e6:	e0dd      	b.n	80075a4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc3a 	bl	8007c6a <USBH_SetCfg>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 80d5 	bne.w	80075a8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2209      	movs	r2, #9
 8007402:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007404:	e0d0      	b.n	80075a8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d016      	beq.n	8007442 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007414:	2101      	movs	r1, #1
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fc4a 	bl	8007cb0 <USBH_SetFeature>
 800741c:	4603      	mov	r3, r0
 800741e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220a      	movs	r2, #10
 800742c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800742e:	e0bd      	b.n	80075ac <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b03      	cmp	r3, #3
 8007436:	f040 80b9 	bne.w	80075ac <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220a      	movs	r2, #10
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e0b4      	b.n	80075ac <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	220a      	movs	r2, #10
 8007446:	701a      	strb	r2, [r3, #0]
      break;
 8007448:	e0b0      	b.n	80075ac <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80ad 	beq.w	80075b0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
 8007462:	e016      	b.n	8007492 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32de      	adds	r2, #222	@ 0xde
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	791a      	ldrb	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007476:	429a      	cmp	r2, r3
 8007478:	d108      	bne.n	800748c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32de      	adds	r2, #222	@ 0xde
 8007480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800748a:	e005      	b.n	8007498 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	3301      	adds	r3, #1
 8007490:	73fb      	strb	r3, [r7, #15]
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0e5      	beq.n	8007464 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2206      	movs	r2, #6
 80074b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074c0:	2103      	movs	r1, #3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074c6:	e073      	b.n	80075b0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220d      	movs	r2, #13
 80074cc:	701a      	strb	r2, [r3, #0]
      break;
 80074ce:	e06f      	b.n	80075b0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	220d      	movs	r2, #13
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e06b      	b.n	80075b0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	220b      	movs	r2, #11
 80074fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007500:	e058      	b.n	80075b4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d154      	bne.n	80075b4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220d      	movs	r2, #13
 800750e:	701a      	strb	r2, [r3, #0]
      break;
 8007510:	e050      	b.n	80075b4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e04c      	b.n	80075b4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d049      	beq.n	80075b8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
      }
      break;
 8007530:	e042      	b.n	80075b8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fd4a 	bl	8006fd4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800756e:	2105      	movs	r1, #5
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fe22 	bl	80071d2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800758e:	e014      	b.n	80075ba <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fb19 	bl	8008bc8 <USBH_LL_Start>
      break;
 8007596:	e010      	b.n	80075ba <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007598:	bf00      	nop
 800759a:	e00e      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 800759c:	bf00      	nop
 800759e:	e00c      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075a0:	bf00      	nop
 80075a2:	e00a      	b.n	80075ba <USBH_Process+0x3c6>
    break;
 80075a4:	bf00      	nop
 80075a6:	e008      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075a8:	bf00      	nop
 80075aa:	e006      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075ac:	bf00      	nop
 80075ae:	e004      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <USBH_Process+0x3c6>
      break;
 80075b8:	bf00      	nop
  }
  return USBH_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b07      	cmp	r3, #7
 80075da:	f200 81bd 	bhi.w	8007958 <USBH_HandleEnum+0x394>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <USBH_HandleEnum+0x20>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007605 	.word	0x08007605
 80075e8:	080076bf 	.word	0x080076bf
 80075ec:	08007729 	.word	0x08007729
 80075f0:	080077b3 	.word	0x080077b3
 80075f4:	0800781d 	.word	0x0800781d
 80075f8:	0800788d 	.word	0x0800788d
 80075fc:	080078d3 	.word	0x080078d3
 8007600:	08007919 	.word	0x08007919
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007604:	2108      	movs	r1, #8
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa4c 	bl	8007aa4 <USBH_Get_DevDesc>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d12e      	bne.n	8007674 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7919      	ldrb	r1, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800763a:	9202      	str	r2, [sp, #8]
 800763c:	2200      	movs	r2, #0
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4603      	mov	r3, r0
 8007644:	2280      	movs	r2, #128	@ 0x80
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 f8dc 	bl	8008804 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7959      	ldrb	r1, [r3, #5]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007660:	9202      	str	r2, [sp, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	9201      	str	r2, [sp, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4603      	mov	r3, r0
 800766a:	2200      	movs	r2, #0
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f8c9 	bl	8008804 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007672:	e173      	b.n	800795c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b03      	cmp	r3, #3
 8007678:	f040 8170 	bne.w	800795c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007692:	2b03      	cmp	r3, #3
 8007694:	d903      	bls.n	800769e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	220d      	movs	r2, #13
 800769a:	701a      	strb	r2, [r3, #0]
      break;
 800769c:	e15e      	b.n	800795c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	795b      	ldrb	r3, [r3, #5]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f8fd 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f8f7 	bl	80088a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
      break;
 80076bc:	e14e      	b.n	800795c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076be:	2112      	movs	r1, #18
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9ef 	bl	8007aa4 <USBH_Get_DevDesc>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076d6:	e143      	b.n	8007960 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f040 8140 	bne.w	8007960 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076e6:	3301      	adds	r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d903      	bls.n	8007702 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	220d      	movs	r2, #13
 80076fe:	701a      	strb	r2, [r3, #0]
      break;
 8007700:	e12e      	b.n	8007960 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	795b      	ldrb	r3, [r3, #5]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f8cb 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f8c5 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
      break;
 8007726:	e11b      	b.n	8007960 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007728:	2101      	movs	r1, #1
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa79 	bl	8007c22 <USBH_SetAddress>
 8007730:	4603      	mov	r3, r0
 8007732:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d130      	bne.n	800779c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800773a:	2002      	movs	r0, #2
 800773c:	f001 fbab 	bl	8008e96 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2203      	movs	r2, #3
 800774c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7919      	ldrb	r1, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007762:	9202      	str	r2, [sp, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	9201      	str	r2, [sp, #4]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4603      	mov	r3, r0
 800776c:	2280      	movs	r2, #128	@ 0x80
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 f848 	bl	8008804 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7959      	ldrb	r1, [r3, #5]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	9201      	str	r2, [sp, #4]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	2200      	movs	r2, #0
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 f835 	bl	8008804 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800779a:	e0e3      	b.n	8007964 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f040 80e0 	bne.w	8007964 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	220d      	movs	r2, #13
 80077a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	705a      	strb	r2, [r3, #1]
      break;
 80077b0:	e0d8      	b.n	8007964 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077b2:	2109      	movs	r1, #9
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9a1 	bl	8007afc <USBH_Get_CfgDesc>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2204      	movs	r2, #4
 80077c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ca:	e0cd      	b.n	8007968 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	f040 80ca 	bne.w	8007968 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077da:	3301      	adds	r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d903      	bls.n	80077f6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220d      	movs	r2, #13
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e0b8      	b.n	8007968 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	795b      	ldrb	r3, [r3, #5]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f851 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	791b      	ldrb	r3, [r3, #4]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 f84b 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	e0a5      	b.n	8007968 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f969 	bl	8007afc <USBH_Get_CfgDesc>
 800782a:	4603      	mov	r3, r0
 800782c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2205      	movs	r2, #5
 8007838:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800783a:	e097      	b.n	800796c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b03      	cmp	r3, #3
 8007840:	f040 8094 	bne.w	800796c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800784a:	3301      	adds	r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800785a:	2b03      	cmp	r3, #3
 800785c:	d903      	bls.n	8007866 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	220d      	movs	r2, #13
 8007862:	701a      	strb	r2, [r3, #0]
      break;
 8007864:	e082      	b.n	800796c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	795b      	ldrb	r3, [r3, #5]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f819 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f813 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e06f      	b.n	800796c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007892:	2b00      	cmp	r3, #0
 8007894:	d019      	beq.n	80078ca <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078a2:	23ff      	movs	r3, #255	@ 0xff
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f953 	bl	8007b50 <USBH_Get_StringDesc>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2206      	movs	r2, #6
 80078b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078ba:	e059      	b.n	8007970 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d156      	bne.n	8007970 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2206      	movs	r2, #6
 80078c6:	705a      	strb	r2, [r3, #1]
      break;
 80078c8:	e052      	b.n	8007970 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2206      	movs	r2, #6
 80078ce:	705a      	strb	r2, [r3, #1]
      break;
 80078d0:	e04e      	b.n	8007970 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d019      	beq.n	8007910 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078e8:	23ff      	movs	r3, #255	@ 0xff
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f930 	bl	8007b50 <USBH_Get_StringDesc>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2207      	movs	r2, #7
 80078fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007900:	e038      	b.n	8007974 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b03      	cmp	r3, #3
 8007906:	d135      	bne.n	8007974 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2207      	movs	r2, #7
 800790c:	705a      	strb	r2, [r3, #1]
      break;
 800790e:	e031      	b.n	8007974 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2207      	movs	r2, #7
 8007914:	705a      	strb	r2, [r3, #1]
      break;
 8007916:	e02d      	b.n	8007974 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800791e:	2b00      	cmp	r3, #0
 8007920:	d017      	beq.n	8007952 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800792e:	23ff      	movs	r3, #255	@ 0xff
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f90d 	bl	8007b50 <USBH_Get_StringDesc>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007944:	e018      	b.n	8007978 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d115      	bne.n	8007978 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	e012      	b.n	8007978 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
      break;
 8007956:	e00f      	b.n	8007978 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007958:	bf00      	nop
 800795a:	e00e      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 800795c:	bf00      	nop
 800795e:	e00c      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007960:	bf00      	nop
 8007962:	e00a      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007964:	bf00      	nop
 8007966:	e008      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007968:	bf00      	nop
 800796a:	e006      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 800796c:	bf00      	nop
 800796e:	e004      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007970:	bf00      	nop
 8007972:	e002      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <USBH_HandleEnum+0x3b6>
      break;
 8007978:	bf00      	nop
  }
  return Status;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f804 	bl	80079c6 <USBH_HandleSof>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b0b      	cmp	r3, #11
 80079d6:	d10a      	bne.n	80079ee <USBH_HandleSof+0x28>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
  }
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a06:	bf00      	nop
}
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007a22:	bf00      	nop
}
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f8be 	bl	8008bfe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	791b      	ldrb	r3, [r3, #4]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 ff0b 	bl	80088a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	795b      	ldrb	r3, [r3, #5]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 ff05 	bl	80088a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007ab0:	887b      	ldrh	r3, [r7, #2]
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab6:	d901      	bls.n	8007abc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e01b      	b.n	8007af4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007acc:	2100      	movs	r1, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f872 	bl	8007bb8 <USBH_GetDescriptor>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ae4:	887a      	ldrh	r2, [r7, #2]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f929 	bl	8007d40 <USBH_ParseDevDesc>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	331c      	adds	r3, #28
 8007b0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b14:	d901      	bls.n	8007b1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e016      	b.n	8007b48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b24:	2100      	movs	r1, #0
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f846 	bl	8007bb8 <USBH_GetDescriptor>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b36:	887b      	ldrh	r3, [r7, #2]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9af 	bl	8007ea0 <USBH_ParseCfgDesc>
 8007b42:	4603      	mov	r3, r0
 8007b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	72fb      	strb	r3, [r7, #11]
 8007b60:	4613      	mov	r3, r2
 8007b62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007b64:	893b      	ldrh	r3, [r7, #8]
 8007b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6a:	d802      	bhi.n	8007b72 <USBH_Get_StringDesc+0x22>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e01c      	b.n	8007bb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007b7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b86:	893b      	ldrh	r3, [r7, #8]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f812 	bl	8007bb8 <USBH_GetDescriptor>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d107      	bne.n	8007bae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ba4:	893a      	ldrh	r2, [r7, #8]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fb8d 	bl	80082c8 <USBH_ParseStringDesc>
  }

  return status;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	72fb      	strb	r3, [r7, #11]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	789b      	ldrb	r3, [r3, #2]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d11c      	bne.n	8007c0c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2206      	movs	r2, #6
 8007be2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	893a      	ldrh	r2, [r7, #8]
 8007be8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bea:	893b      	ldrh	r3, [r7, #8]
 8007bec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bf4:	d104      	bne.n	8007c00 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f240 4209 	movw	r2, #1033	@ 0x409
 8007bfc:	829a      	strh	r2, [r3, #20]
 8007bfe:	e002      	b.n	8007c06 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8b3a      	ldrh	r2, [r7, #24]
 8007c0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c0c:	8b3b      	ldrh	r3, [r7, #24]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 fba5 	bl	8008362 <USBH_CtlReq>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	789b      	ldrb	r3, [r3, #2]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d10f      	bne.n	8007c56 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2205      	movs	r2, #5
 8007c40:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fb81 	bl	8008362 <USBH_CtlReq>
 8007c60:	4603      	mov	r3, r0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	789b      	ldrb	r3, [r3, #2]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10e      	bne.n	8007c9c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2209      	movs	r2, #9
 8007c88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	887a      	ldrh	r2, [r7, #2]
 8007c8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb5e 	bl	8008362 <USBH_CtlReq>
 8007ca6:	4603      	mov	r3, r0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	789b      	ldrb	r3, [r3, #2]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d10f      	bne.n	8007ce4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fb3a 	bl	8008362 <USBH_CtlReq>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	789b      	ldrb	r3, [r3, #2]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10f      	bne.n	8007d2c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fb16 	bl	8008362 <USBH_CtlReq>
 8007d36:	4603      	mov	r3, r0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007d54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007d60:	2302      	movs	r3, #2
 8007d62:	e094      	b.n	8007e8e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	785a      	ldrb	r2, [r3, #1]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3302      	adds	r3, #2
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3303      	adds	r3, #3
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	791a      	ldrb	r2, [r3, #4]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	795a      	ldrb	r2, [r3, #5]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	799a      	ldrb	r2, [r3, #6]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	79da      	ldrb	r2, [r3, #7]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d11b      	bne.n	8007dfa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	79db      	ldrb	r3, [r3, #7]
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	dc0f      	bgt.n	8007dea <USBH_ParseDevDesc+0xaa>
 8007dca:	2b08      	cmp	r3, #8
 8007dcc:	db0f      	blt.n	8007dee <USBH_ParseDevDesc+0xae>
 8007dce:	3b08      	subs	r3, #8
 8007dd0:	4a32      	ldr	r2, [pc, #200]	@ (8007e9c <USBH_ParseDevDesc+0x15c>)
 8007dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <USBH_ParseDevDesc+0xb6>
 8007de8:	e001      	b.n	8007dee <USBH_ParseDevDesc+0xae>
 8007dea:	2b40      	cmp	r3, #64	@ 0x40
 8007dec:	d003      	beq.n	8007df6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2208      	movs	r2, #8
 8007df2:	71da      	strb	r2, [r3, #7]
        break;
 8007df4:	e000      	b.n	8007df8 <USBH_ParseDevDesc+0xb8>
        break;
 8007df6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007df8:	e00e      	b.n	8007e18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d107      	bne.n	8007e14 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	79db      	ldrb	r3, [r3, #7]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d005      	beq.n	8007e18 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2208      	movs	r2, #8
 8007e10:	71da      	strb	r2, [r3, #7]
 8007e12:	e001      	b.n	8007e18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e14:	2303      	movs	r3, #3
 8007e16:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d936      	bls.n	8007e8c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3308      	adds	r3, #8
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	3309      	adds	r3, #9
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	330a      	adds	r3, #10
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	330b      	adds	r3, #11
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	330c      	adds	r3, #12
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	330d      	adds	r3, #13
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	7b9a      	ldrb	r2, [r3, #14]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	7bda      	ldrb	r2, [r3, #15]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7c1a      	ldrb	r2, [r3, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	7c5a      	ldrb	r2, [r3, #17]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	01000101 	.word	0x01000101

08007ea0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	@ 0x30
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007eb4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e0da      	b.n	8008088 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	785a      	ldrb	r2, [r3, #1]
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	3302      	adds	r3, #2
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	3303      	adds	r3, #3
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f00:	bf28      	it	cs
 8007f02:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	791a      	ldrb	r2, [r3, #4]
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	795a      	ldrb	r2, [r3, #5]
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	799a      	ldrb	r2, [r3, #6]
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	79da      	ldrb	r2, [r3, #7]
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	7a1a      	ldrb	r2, [r3, #8]
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b09      	cmp	r3, #9
 8007f3a:	d002      	beq.n	8007f42 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	2209      	movs	r2, #9
 8007f40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	2b09      	cmp	r3, #9
 8007f46:	f240 809d 	bls.w	8008084 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f4a:	2309      	movs	r3, #9
 8007f4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f52:	e081      	b.n	8008058 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f54:	f107 0316 	add.w	r3, r7, #22
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f5c:	f000 f9e7 	bl	800832e <USBH_GetNextDesc>
 8007f60:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d176      	bne.n	8008058 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b09      	cmp	r3, #9
 8007f70:	d002      	beq.n	8007f78 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	2209      	movs	r2, #9
 8007f76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f7c:	221a      	movs	r2, #26
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	3308      	adds	r3, #8
 8007f84:	6a3a      	ldr	r2, [r7, #32]
 8007f86:	4413      	add	r3, r2
 8007f88:	3302      	adds	r3, #2
 8007f8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f8e:	69f8      	ldr	r0, [r7, #28]
 8007f90:	f000 f87e 	bl	8008090 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f9e:	e043      	b.n	8008028 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fa0:	f107 0316 	add.w	r3, r7, #22
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fa8:	f000 f9c1 	bl	800832e <USBH_GetNextDesc>
 8007fac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d138      	bne.n	8008028 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	795b      	ldrb	r3, [r3, #5]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d113      	bne.n	8007fe6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d003      	beq.n	8007fce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	799b      	ldrb	r3, [r3, #6]
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d10b      	bne.n	8007fe6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	79db      	ldrb	r3, [r3, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <USBH_ParseCfgDesc+0x14e>
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d007      	beq.n	8007fee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	2209      	movs	r2, #9
 8007fe2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fe4:	e003      	b.n	8007fee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	2207      	movs	r2, #7
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e000      	b.n	8007ff0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	211a      	movs	r1, #26
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	4413      	add	r3, r2
 8008004:	3308      	adds	r3, #8
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800800e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f870 	bl	80080f8 <USBH_ParseEPDesc>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800801e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008022:	3301      	adds	r3, #1
 8008024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	791b      	ldrb	r3, [r3, #4]
 800802c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008030:	429a      	cmp	r2, r3
 8008032:	d204      	bcs.n	800803e <USBH_ParseCfgDesc+0x19e>
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	885a      	ldrh	r2, [r3, #2]
 8008038:	8afb      	ldrh	r3, [r7, #22]
 800803a:	429a      	cmp	r2, r3
 800803c:	d8b0      	bhi.n	8007fa0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008046:	429a      	cmp	r2, r3
 8008048:	d201      	bcs.n	800804e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800804a:	2303      	movs	r3, #3
 800804c:	e01c      	b.n	8008088 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800804e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008052:	3301      	adds	r3, #1
 8008054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800805c:	2b01      	cmp	r3, #1
 800805e:	d805      	bhi.n	800806c <USBH_ParseCfgDesc+0x1cc>
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	885a      	ldrh	r2, [r3, #2]
 8008064:	8afb      	ldrh	r3, [r7, #22]
 8008066:	429a      	cmp	r2, r3
 8008068:	f63f af74 	bhi.w	8007f54 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	791b      	ldrb	r3, [r3, #4]
 8008070:	2b02      	cmp	r3, #2
 8008072:	bf28      	it	cs
 8008074:	2302      	movcs	r3, #2
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800807c:	429a      	cmp	r2, r3
 800807e:	d201      	bcs.n	8008084 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008080:	2303      	movs	r3, #3
 8008082:	e001      	b.n	8008088 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008084:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008088:	4618      	mov	r0, r3
 800808a:	3730      	adds	r7, #48	@ 0x30
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781a      	ldrb	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	785a      	ldrb	r2, [r3, #1]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	789a      	ldrb	r2, [r3, #2]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	78da      	ldrb	r2, [r3, #3]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	bf28      	it	cs
 80080c4:	2302      	movcs	r3, #2
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	795a      	ldrb	r2, [r3, #5]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	799a      	ldrb	r2, [r3, #6]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	79da      	ldrb	r2, [r3, #7]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	7a1a      	ldrb	r2, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	721a      	strb	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	785a      	ldrb	r2, [r3, #1]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	789a      	ldrb	r2, [r3, #2]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	78da      	ldrb	r2, [r3, #3]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3305      	adds	r3, #5
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	021b      	lsls	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	799a      	ldrb	r2, [r3, #6]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	889b      	ldrh	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800815a:	d804      	bhi.n	8008166 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008164:	d901      	bls.n	800816a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008166:	2303      	movs	r3, #3
 8008168:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008170:	2b00      	cmp	r3, #0
 8008172:	d136      	bne.n	80081e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	78db      	ldrb	r3, [r3, #3]
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d108      	bne.n	8008192 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	889b      	ldrh	r3, [r3, #4]
 8008184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008188:	f240 8097 	bls.w	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800818c:	2303      	movs	r3, #3
 800818e:	75fb      	strb	r3, [r7, #23]
 8008190:	e093      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d107      	bne.n	80081ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	2b40      	cmp	r3, #64	@ 0x40
 80081a4:	f240 8089 	bls.w	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081a8:	2303      	movs	r3, #3
 80081aa:	75fb      	strb	r3, [r7, #23]
 80081ac:	e085      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	78db      	ldrb	r3, [r3, #3]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d005      	beq.n	80081c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d10a      	bne.n	80081dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	799b      	ldrb	r3, [r3, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <USBH_ParseEPDesc+0xde>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	799b      	ldrb	r3, [r3, #6]
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d970      	bls.n	80082b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80081d6:	2303      	movs	r3, #3
 80081d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081da:	e06d      	b.n	80082b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
 80081e0:	e06b      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d13c      	bne.n	8008266 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	78db      	ldrb	r3, [r3, #3]
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d005      	beq.n	8008204 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	78db      	ldrb	r3, [r3, #3]
 80081fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	889b      	ldrh	r3, [r3, #4]
 8008208:	2b40      	cmp	r3, #64	@ 0x40
 800820a:	d956      	bls.n	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800820c:	2303      	movs	r3, #3
 800820e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008210:	e053      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	78db      	ldrb	r3, [r3, #3]
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	2b01      	cmp	r3, #1
 800821c:	d10e      	bne.n	800823c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	799b      	ldrb	r3, [r3, #6]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d007      	beq.n	8008236 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800822a:	2b10      	cmp	r3, #16
 800822c:	d803      	bhi.n	8008236 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008232:	2b40      	cmp	r3, #64	@ 0x40
 8008234:	d941      	bls.n	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008236:	2303      	movs	r3, #3
 8008238:	75fb      	strb	r3, [r7, #23]
 800823a:	e03e      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	78db      	ldrb	r3, [r3, #3]
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	2b03      	cmp	r3, #3
 8008246:	d10b      	bne.n	8008260 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	799b      	ldrb	r3, [r3, #6]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <USBH_ParseEPDesc+0x162>
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	889b      	ldrh	r3, [r3, #4]
 8008254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008258:	d32f      	bcc.n	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800825a:	2303      	movs	r3, #3
 800825c:	75fb      	strb	r3, [r7, #23]
 800825e:	e02c      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008260:	2303      	movs	r3, #3
 8008262:	75fb      	strb	r3, [r7, #23]
 8008264:	e029      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800826c:	2b02      	cmp	r3, #2
 800826e:	d120      	bne.n	80082b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	78db      	ldrb	r3, [r3, #3]
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	889b      	ldrh	r3, [r3, #4]
 8008280:	2b08      	cmp	r3, #8
 8008282:	d01a      	beq.n	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008284:	2303      	movs	r3, #3
 8008286:	75fb      	strb	r3, [r7, #23]
 8008288:	e017      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	f003 0303 	and.w	r3, r3, #3
 8008292:	2b03      	cmp	r3, #3
 8008294:	d10a      	bne.n	80082ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	799b      	ldrb	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <USBH_ParseEPDesc+0x1ae>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	2b08      	cmp	r3, #8
 80082a4:	d909      	bls.n	80082ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082a6:	2303      	movs	r3, #3
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e006      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082ac:	2303      	movs	r3, #3
 80082ae:	75fb      	strb	r3, [r7, #23]
 80082b0:	e003      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80082b2:	2303      	movs	r3, #3
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	e000      	b.n	80082ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082b8:	bf00      	nop
  }

  return status;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d120      	bne.n	8008322 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	1e9a      	subs	r2, r3, #2
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	bf28      	it	cs
 80082ec:	4613      	movcs	r3, r2
 80082ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3302      	adds	r3, #2
 80082f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082f6:	2300      	movs	r3, #0
 80082f8:	82fb      	strh	r3, [r7, #22]
 80082fa:	e00b      	b.n	8008314 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082fc:	8afb      	ldrh	r3, [r7, #22]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	781a      	ldrb	r2, [r3, #0]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3301      	adds	r3, #1
 800830c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800830e:	8afb      	ldrh	r3, [r7, #22]
 8008310:	3302      	adds	r3, #2
 8008312:	82fb      	strh	r3, [r7, #22]
 8008314:	8afa      	ldrh	r2, [r7, #22]
 8008316:	8abb      	ldrh	r3, [r7, #20]
 8008318:	429a      	cmp	r2, r3
 800831a:	d3ef      	bcc.n	80082fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
  }
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	4413      	add	r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4613      	mov	r3, r2
 800836e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	789b      	ldrb	r3, [r3, #2]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d002      	beq.n	8008382 <USBH_CtlReq+0x20>
 800837c:	2b02      	cmp	r3, #2
 800837e:	d00f      	beq.n	80083a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008380:	e027      	b.n	80083d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2202      	movs	r2, #2
 8008398:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800839a:	2301      	movs	r3, #1
 800839c:	75fb      	strb	r3, [r7, #23]
      break;
 800839e:	e018      	b.n	80083d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f81b 	bl	80083dc <USBH_HandleControl>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <USBH_CtlReq+0x54>
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d106      	bne.n	80083c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	761a      	strb	r2, [r3, #24]
      break;
 80083c2:	e005      	b.n	80083d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d102      	bne.n	80083d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	709a      	strb	r2, [r3, #2]
      break;
 80083d0:	bf00      	nop
  }
  return status;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7e1b      	ldrb	r3, [r3, #24]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	2b0a      	cmp	r3, #10
 80083f4:	f200 8156 	bhi.w	80086a4 <USBH_HandleControl+0x2c8>
 80083f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <USBH_HandleControl+0x24>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008447 	.word	0x08008447
 8008408:	080084b1 	.word	0x080084b1
 800840c:	080084d7 	.word	0x080084d7
 8008410:	0800850f 	.word	0x0800850f
 8008414:	08008539 	.word	0x08008539
 8008418:	0800858b 	.word	0x0800858b
 800841c:	080085ad 	.word	0x080085ad
 8008420:	080085e9 	.word	0x080085e9
 8008424:	0800860f 	.word	0x0800860f
 8008428:	0800864d 	.word	0x0800864d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0110 	add.w	r1, r3, #16
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	461a      	mov	r2, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f943 	bl	80086c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	761a      	strb	r2, [r3, #24]
      break;
 8008444:	e139      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	795b      	ldrb	r3, [r3, #5]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fcc5 	bl	8008ddc <USBH_LL_GetURBState>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11e      	bne.n	800849a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7c1b      	ldrb	r3, [r3, #16]
 8008460:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008464:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8adb      	ldrh	r3, [r3, #22]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800846e:	7b7b      	ldrb	r3, [r7, #13]
 8008470:	2b80      	cmp	r3, #128	@ 0x80
 8008472:	d103      	bne.n	800847c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800847a:	e115      	b.n	80086a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2205      	movs	r2, #5
 8008480:	761a      	strb	r2, [r3, #24]
      break;
 8008482:	e111      	b.n	80086a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008484:	7b7b      	ldrb	r3, [r7, #13]
 8008486:	2b80      	cmp	r3, #128	@ 0x80
 8008488:	d103      	bne.n	8008492 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2209      	movs	r2, #9
 800848e:	761a      	strb	r2, [r3, #24]
      break;
 8008490:	e10a      	b.n	80086a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2207      	movs	r2, #7
 8008496:	761a      	strb	r2, [r3, #24]
      break;
 8008498:	e106      	b.n	80086a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d003      	beq.n	80084a8 <USBH_HandleControl+0xcc>
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	f040 8100 	bne.w	80086a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220b      	movs	r2, #11
 80084ac:	761a      	strb	r2, [r3, #24]
      break;
 80084ae:	e0fb      	b.n	80086a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6899      	ldr	r1, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	899a      	ldrh	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f93a 	bl	8008742 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	761a      	strb	r2, [r3, #24]
      break;
 80084d4:	e0f1      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc7d 	bl	8008ddc <USBH_LL_GetURBState>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2209      	movs	r2, #9
 80084f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b05      	cmp	r3, #5
 80084f6:	d102      	bne.n	80084fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084f8:	2303      	movs	r3, #3
 80084fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084fc:	e0d6      	b.n	80086ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b04      	cmp	r3, #4
 8008502:	f040 80d3 	bne.w	80086ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	220b      	movs	r2, #11
 800850a:	761a      	strb	r2, [r3, #24]
      break;
 800850c:	e0ce      	b.n	80086ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6899      	ldr	r1, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	899a      	ldrh	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	2001      	movs	r0, #1
 800851c:	9000      	str	r0, [sp, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8ea 	bl	80086f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800852a:	b29a      	uxth	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2206      	movs	r2, #6
 8008534:	761a      	strb	r2, [r3, #24]
      break;
 8008536:	e0c0      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	795b      	ldrb	r3, [r3, #5]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc4c 	bl	8008ddc <USBH_LL_GetURBState>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d103      	bne.n	8008556 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2207      	movs	r2, #7
 8008552:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008554:	e0ac      	b.n	80086b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b05      	cmp	r3, #5
 800855a:	d105      	bne.n	8008568 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	220c      	movs	r2, #12
 8008560:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008562:	2303      	movs	r3, #3
 8008564:	73fb      	strb	r3, [r7, #15]
      break;
 8008566:	e0a3      	b.n	80086b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d103      	bne.n	8008576 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2205      	movs	r2, #5
 8008572:	761a      	strb	r2, [r3, #24]
      break;
 8008574:	e09c      	b.n	80086b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b04      	cmp	r3, #4
 800857a:	f040 8099 	bne.w	80086b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220b      	movs	r2, #11
 8008582:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008584:	2302      	movs	r3, #2
 8008586:	73fb      	strb	r3, [r7, #15]
      break;
 8008588:	e092      	b.n	80086b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8d5 	bl	8008742 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2208      	movs	r2, #8
 80085a8:	761a      	strb	r2, [r3, #24]

      break;
 80085aa:	e086      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	791b      	ldrb	r3, [r3, #4]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc12 	bl	8008ddc <USBH_LL_GetURBState>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d105      	bne.n	80085ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220d      	movs	r2, #13
 80085c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085cc:	e072      	b.n	80086b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d103      	bne.n	80085dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220b      	movs	r2, #11
 80085d8:	761a      	strb	r2, [r3, #24]
      break;
 80085da:	e06b      	b.n	80086b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b05      	cmp	r3, #5
 80085e0:	d168      	bne.n	80086b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085e2:	2303      	movs	r3, #3
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	e065      	b.n	80086b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	795b      	ldrb	r3, [r3, #5]
 80085ec:	2201      	movs	r2, #1
 80085ee:	9200      	str	r2, [sp, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f87f 	bl	80086f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220a      	movs	r2, #10
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e055      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fbe1 	bl	8008ddc <USBH_LL_GetURBState>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d105      	bne.n	8008630 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220d      	movs	r2, #13
 800862c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800862e:	e043      	b.n	80086b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d103      	bne.n	800863e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2209      	movs	r2, #9
 800863a:	761a      	strb	r2, [r3, #24]
      break;
 800863c:	e03c      	b.n	80086b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b04      	cmp	r3, #4
 8008642:	d139      	bne.n	80086b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220b      	movs	r2, #11
 8008648:	761a      	strb	r2, [r3, #24]
      break;
 800864a:	e035      	b.n	80086b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7e5b      	ldrb	r3, [r3, #25]
 8008650:	3301      	adds	r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	765a      	strb	r2, [r3, #25]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	7e5b      	ldrb	r3, [r3, #25]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d806      	bhi.n	800866e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800866c:	e025      	b.n	80086ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008674:	2106      	movs	r1, #6
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	795b      	ldrb	r3, [r3, #5]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f90c 	bl	80088a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f906 	bl	80088a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800869e:	2302      	movs	r3, #2
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e00a      	b.n	80086ba <USBH_HandleControl+0x2de>

    default:
      break;
 80086a4:	bf00      	nop
 80086a6:	e008      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086a8:	bf00      	nop
 80086aa:	e006      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086ac:	bf00      	nop
 80086ae:	e004      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b0:	bf00      	nop
 80086b2:	e002      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b4:	bf00      	nop
 80086b6:	e000      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b8:	bf00      	nop
  }

  return status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086d2:	79f9      	ldrb	r1, [r7, #7]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	2308      	movs	r3, #8
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	2300      	movs	r3, #0
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fb46 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4611      	mov	r1, r2
 8008704:	461a      	mov	r2, r3
 8008706:	460b      	mov	r3, r1
 8008708:	80fb      	strh	r3, [r7, #6]
 800870a:	4613      	mov	r3, r2
 800870c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800871c:	7979      	ldrb	r1, [r7, #5]
 800871e:	7e3b      	ldrb	r3, [r7, #24]
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	2301      	movs	r3, #1
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	2300      	movs	r3, #0
 8008730:	2200      	movs	r2, #0
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fb21 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b088      	sub	sp, #32
 8008746:	af04      	add	r7, sp, #16
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4611      	mov	r1, r2
 800874e:	461a      	mov	r2, r3
 8008750:	460b      	mov	r3, r1
 8008752:	80fb      	strh	r3, [r7, #6]
 8008754:	4613      	mov	r3, r2
 8008756:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008758:	7979      	ldrb	r1, [r7, #5]
 800875a:	2300      	movs	r3, #0
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	2301      	movs	r3, #1
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	2300      	movs	r3, #0
 800876c:	2201      	movs	r2, #1
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fb03 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008774:	2300      	movs	r3, #0

}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b088      	sub	sp, #32
 8008782:	af04      	add	r7, sp, #16
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	4611      	mov	r1, r2
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	80fb      	strh	r3, [r7, #6]
 8008790:	4613      	mov	r3, r2
 8008792:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087a2:	7979      	ldrb	r1, [r7, #5]
 80087a4:	7e3b      	ldrb	r3, [r7, #24]
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	9302      	str	r3, [sp, #8]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	2301      	movs	r3, #1
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	2302      	movs	r3, #2
 80087b6:	2200      	movs	r2, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fade 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4611      	mov	r1, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	460b      	mov	r3, r1
 80087d8:	80fb      	strh	r3, [r7, #6]
 80087da:	4613      	mov	r3, r2
 80087dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087de:	7979      	ldrb	r1, [r7, #5]
 80087e0:	2300      	movs	r3, #0
 80087e2:	9303      	str	r3, [sp, #12]
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	2301      	movs	r3, #1
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2302      	movs	r3, #2
 80087f2:	2201      	movs	r2, #1
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fac0 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af04      	add	r7, sp, #16
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4603      	mov	r3, r0
 8008814:	70fb      	strb	r3, [r7, #3]
 8008816:	460b      	mov	r3, r1
 8008818:	70bb      	strb	r3, [r7, #2]
 800881a:	4613      	mov	r3, r2
 800881c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800881e:	7878      	ldrb	r0, [r7, #1]
 8008820:	78ba      	ldrb	r2, [r7, #2]
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	8b3b      	ldrh	r3, [r7, #24]
 8008826:	9302      	str	r3, [sp, #8]
 8008828:	7d3b      	ldrb	r3, [r7, #20]
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	7c3b      	ldrb	r3, [r7, #16]
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4603      	mov	r3, r0
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa53 	bl	8008cde <USBH_LL_OpenPipe>

  return USBH_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa72 	bl	8008d3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f836 	bl	80088e0 <USBH_GetFreePipe>
 8008874:	4603      	mov	r3, r0
 8008876:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008878:	89fb      	ldrh	r3, [r7, #14]
 800887a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800887e:	4293      	cmp	r3, r2
 8008880:	d00a      	beq.n	8008898 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	89fb      	ldrh	r3, [r7, #14]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	33e0      	adds	r3, #224	@ 0xe0
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	b2db      	uxtb	r3, r3
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d80d      	bhi.n	80088d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	33e0      	adds	r3, #224	@ 0xe0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	33e0      	adds	r3, #224	@ 0xe0
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
 80088f0:	e00f      	b.n	8008912 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	33e0      	adds	r3, #224	@ 0xe0
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	b29b      	uxth	r3, r3
 800890a:	e007      	b.n	800891c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	3301      	adds	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d9ec      	bls.n	80088f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800892c:	2201      	movs	r2, #1
 800892e:	490e      	ldr	r1, [pc, #56]	@ (8008968 <MX_USB_HOST_Init+0x40>)
 8008930:	480e      	ldr	r0, [pc, #56]	@ (800896c <MX_USB_HOST_Init+0x44>)
 8008932:	f7fe fb15 	bl	8006f60 <USBH_Init>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800893c:	f7f8 fb72 	bl	8001024 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008940:	490b      	ldr	r1, [pc, #44]	@ (8008970 <MX_USB_HOST_Init+0x48>)
 8008942:	480a      	ldr	r0, [pc, #40]	@ (800896c <MX_USB_HOST_Init+0x44>)
 8008944:	f7fe fbb9 	bl	80070ba <USBH_RegisterClass>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800894e:	f7f8 fb69 	bl	8001024 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008952:	4806      	ldr	r0, [pc, #24]	@ (800896c <MX_USB_HOST_Init+0x44>)
 8008954:	f7fe fc3d 	bl	80071d2 <USBH_Start>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800895e:	f7f8 fb61 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008962:	bf00      	nop
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	08008989 	.word	0x08008989
 800896c:	20000194 	.word	0x20000194
 8008970:	2000000c 	.word	0x2000000c

08008974 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008978:	4802      	ldr	r0, [pc, #8]	@ (8008984 <MX_USB_HOST_Process+0x10>)
 800897a:	f7fe fc3b 	bl	80071f4 <USBH_Process>
}
 800897e:	bf00      	nop
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000194 	.word	0x20000194

08008988 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	3b01      	subs	r3, #1
 8008998:	2b04      	cmp	r3, #4
 800899a:	d819      	bhi.n	80089d0 <USBH_UserProcess+0x48>
 800899c:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <USBH_UserProcess+0x1c>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089b9 	.word	0x080089b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089b8:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <USBH_UserProcess+0x58>)
 80089ba:	2203      	movs	r2, #3
 80089bc:	701a      	strb	r2, [r3, #0]
  break;
 80089be:	e008      	b.n	80089d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <USBH_UserProcess+0x58>)
 80089c2:	2202      	movs	r2, #2
 80089c4:	701a      	strb	r2, [r3, #0]
  break;
 80089c6:	e004      	b.n	80089d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <USBH_UserProcess+0x58>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
  break;
 80089ce:	e000      	b.n	80089d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80089d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	2000056c 	.word	0x2000056c

080089e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	@ 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a04:	d147      	bne.n	8008a96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	4b25      	ldr	r3, [pc, #148]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	4a24      	ldr	r2, [pc, #144]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a16:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4619      	mov	r1, r3
 8008a36:	481b      	ldr	r0, [pc, #108]	@ (8008aa4 <HAL_HCD_MspInit+0xc0>)
 8008a38:	f7f8 fe86 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a3c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a42:	2302      	movs	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a4e:	230a      	movs	r3, #10
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	4619      	mov	r1, r3
 8008a58:	4812      	ldr	r0, [pc, #72]	@ (8008aa4 <HAL_HCD_MspInit+0xc0>)
 8008a5a:	f7f8 fe75 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a62:	4a0f      	ldr	r2, [pc, #60]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a68:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a72:	4a0b      	ldr	r2, [pc, #44]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a7a:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2043      	movs	r0, #67	@ 0x43
 8008a8c:	f7f8 fe25 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a90:	2043      	movs	r0, #67	@ 0x43
 8008a92:	f7f8 fe3e 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a96:	bf00      	nop
 8008a98:	3728      	adds	r7, #40	@ 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	40020000 	.word	0x40020000

08008aa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ff73 	bl	80079a2 <USBH_LL_IncTimer>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe ffab 	bl	8007a2e <USBH_LL_Connect>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe ffb4 	bl	8007a5c <USBH_LL_Disconnect>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ff65 	bl	80079f6 <USBH_LL_PortEnabled>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ff65 	bl	8007a12 <USBH_LL_PortDisabled>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d12a      	bne.n	8008bb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b62:	4a18      	ldr	r2, [pc, #96]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a15      	ldr	r2, [pc, #84]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b6e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b72:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008b78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b80:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b92:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b98:	480a      	ldr	r0, [pc, #40]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008b9a:	f7f8 ff8a 	bl	8001ab2 <HAL_HCD_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ba4:	f7f8 fa3e 	bl	8001024 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ba8:	4806      	ldr	r0, [pc, #24]	@ (8008bc4 <USBH_LL_Init+0x74>)
 8008baa:	f7f9 fbeb 	bl	8002384 <HAL_HCD_GetCurrentFrame>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fe fee6 	bl	8007984 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000570 	.word	0x20000570

08008bc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 fb58 	bl	8002294 <HAL_HCD_Start>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f95e 	bl	8008eac <USBH_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f9 fb60 	bl	80022da <HAL_HCD_Stop>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f943 	bl	8008eac <USBH_Get_USB_Status>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 fbaa 	bl	80023a0 <HAL_HCD_GetCurrentSpeed>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d00c      	beq.n	8008c6c <USBH_LL_GetSpeed+0x38>
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d80d      	bhi.n	8008c72 <USBH_LL_GetSpeed+0x3e>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <USBH_LL_GetSpeed+0x2c>
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d003      	beq.n	8008c66 <USBH_LL_GetSpeed+0x32>
 8008c5e:	e008      	b.n	8008c72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e008      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c66:	2301      	movs	r3, #1
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e005      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e002      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	bf00      	nop
  }
  return  speed;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7f9 fb3b 	bl	8002314 <HAL_HCD_ResetPort>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f901 	bl	8008eac <USBH_Get_USB_Status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f9 fb43 	bl	800235a <HAL_HCD_HC_GetXferCount>
 8008cd4:	4603      	mov	r3, r0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cde:	b590      	push	{r4, r7, lr}
 8008ce0:	b089      	sub	sp, #36	@ 0x24
 8008ce2:	af04      	add	r7, sp, #16
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	461a      	mov	r2, r3
 8008cec:	4603      	mov	r3, r0
 8008cee:	70fb      	strb	r3, [r7, #3]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70bb      	strb	r3, [r7, #2]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008d06:	787c      	ldrb	r4, [r7, #1]
 8008d08:	78ba      	ldrb	r2, [r7, #2]
 8008d0a:	78f9      	ldrb	r1, [r7, #3]
 8008d0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	f7f8 ff2f 	bl	8001b80 <HAL_HCD_HC_Init>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f8bf 	bl	8008eac <USBH_Get_USB_Status>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd90      	pop	{r4, r7, pc}

08008d3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f8 ffc8 	bl	8001cf0 <HAL_HCD_HC_Halt>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 f8a0 	bl	8008eac <USBH_Get_USB_Status>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d7a:	b590      	push	{r4, r7, lr}
 8008d7c:	b089      	sub	sp, #36	@ 0x24
 8008d7e:	af04      	add	r7, sp, #16
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	461a      	mov	r2, r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	70fb      	strb	r3, [r7, #3]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70bb      	strb	r3, [r7, #2]
 8008d90:	4613      	mov	r3, r2
 8008d92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008da2:	787c      	ldrb	r4, [r7, #1]
 8008da4:	78ba      	ldrb	r2, [r7, #2]
 8008da6:	78f9      	ldrb	r1, [r7, #3]
 8008da8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	f7f8 ffbb 	bl	8001d38 <HAL_HCD_HC_SubmitRequest>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f86f 	bl	8008eac <USBH_Get_USB_Status>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd90      	pop	{r4, r7, pc}

08008ddc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f9 fa9c 	bl	8002330 <HAL_HCD_HC_GetURBState>
 8008df8:	4603      	mov	r3, r0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d103      	bne.n	8008e20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f872 	bl	8008f04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e20:	20c8      	movs	r0, #200	@ 0xc8
 8008e22:	f7f8 fb5b 	bl	80014dc <HAL_Delay>
  return USBH_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008e46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3317      	adds	r3, #23
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	68f9      	ldr	r1, [r7, #12]
 8008e62:	4613      	mov	r3, r2
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	1a9b      	subs	r3, r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	440b      	add	r3, r1
 8008e6c:	333c      	adds	r3, #60	@ 0x3c
 8008e6e:	78ba      	ldrb	r2, [r7, #2]
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	e009      	b.n	8008e88 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e74:	78fa      	ldrb	r2, [r7, #3]
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	333d      	adds	r3, #61	@ 0x3d
 8008e84:	78ba      	ldrb	r2, [r7, #2]
 8008e86:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7f8 fb1c 	bl	80014dc <HAL_Delay>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d817      	bhi.n	8008ef0 <USBH_Get_USB_Status+0x44>
 8008ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <USBH_Get_USB_Status+0x1c>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008edf 	.word	0x08008edf
 8008ed0:	08008ee5 	.word	0x08008ee5
 8008ed4:	08008eeb 	.word	0x08008eeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e00b      	b.n	8008ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e008      	b.n	8008ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	e005      	b.n	8008ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	73fb      	strb	r3, [r7, #15]
    break;
 8008eee:	e002      	b.n	8008ef6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	bf00      	nop
  }
  return usb_status;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
 8008f1c:	e001      	b.n	8008f22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	461a      	mov	r2, r3
 8008f26:	2101      	movs	r1, #1
 8008f28:	4803      	ldr	r0, [pc, #12]	@ (8008f38 <MX_DriverVbusFS+0x34>)
 8008f2a:	f7f8 fda9 	bl	8001a80 <HAL_GPIO_WritePin>
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40020800 	.word	0x40020800

08008f3c <malloc>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	@ (8008f48 <malloc+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f000 b82d 	b.w	8008fa0 <_malloc_r>
 8008f46:	bf00      	nop
 8008f48:	2000002c 	.word	0x2000002c

08008f4c <free>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	@ (8008f58 <free+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f000 b8f5 	b.w	8009140 <_free_r>
 8008f56:	bf00      	nop
 8008f58:	2000002c 	.word	0x2000002c

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f9c <sbrk_aligned+0x40>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 f8ae 	bl	80090c8 <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f8a9 	bl	80090c8 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d103      	bne.n	8008f82 <sbrk_aligned+0x26>
 8008f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f7e:	4620      	mov	r0, r4
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d0f8      	beq.n	8008f7e <sbrk_aligned+0x22>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f89a 	bl	80090c8 <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d1f2      	bne.n	8008f7e <sbrk_aligned+0x22>
 8008f98:	e7ef      	b.n	8008f7a <sbrk_aligned+0x1e>
 8008f9a:	bf00      	nop
 8008f9c:	20000950 	.word	0x20000950

08008fa0 <_malloc_r>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	1ccd      	adds	r5, r1, #3
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	db01      	blt.n	8008fbc <_malloc_r+0x1c>
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d904      	bls.n	8008fc6 <_malloc_r+0x26>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800909c <_malloc_r+0xfc>
 8008fca:	f000 f869 	bl	80090a0 <__malloc_lock>
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	bb44      	cbnz	r4, 8009028 <_malloc_r+0x88>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbf 	bl	8008f5c <sbrk_aligned>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d158      	bne.n	8009096 <_malloc_r+0xf6>
 8008fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe8:	4627      	mov	r7, r4
 8008fea:	2f00      	cmp	r7, #0
 8008fec:	d143      	bne.n	8009076 <_malloc_r+0xd6>
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d04b      	beq.n	800908a <_malloc_r+0xea>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	eb04 0903 	add.w	r9, r4, r3
 8008ffc:	f000 f864 	bl	80090c8 <_sbrk_r>
 8009000:	4581      	cmp	r9, r0
 8009002:	d142      	bne.n	800908a <_malloc_r+0xea>
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	1a6d      	subs	r5, r5, r1
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa6 	bl	8008f5c <sbrk_aligned>
 8009010:	3001      	adds	r0, #1
 8009012:	d03a      	beq.n	800908a <_malloc_r+0xea>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	442b      	add	r3, r5
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	f8d8 3000 	ldr.w	r3, [r8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	bb62      	cbnz	r2, 800907c <_malloc_r+0xdc>
 8009022:	f8c8 7000 	str.w	r7, [r8]
 8009026:	e00f      	b.n	8009048 <_malloc_r+0xa8>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	1b52      	subs	r2, r2, r5
 800902c:	d420      	bmi.n	8009070 <_malloc_r+0xd0>
 800902e:	2a0b      	cmp	r2, #11
 8009030:	d917      	bls.n	8009062 <_malloc_r+0xc2>
 8009032:	1961      	adds	r1, r4, r5
 8009034:	42a3      	cmp	r3, r4
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	6059      	strne	r1, [r3, #4]
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	bf08      	it	eq
 8009040:	f8c8 1000 	streq.w	r1, [r8]
 8009044:	5162      	str	r2, [r4, r5]
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 f82f 	bl	80090ac <__malloc_unlock>
 800904e:	f104 000b 	add.w	r0, r4, #11
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	f020 0007 	bic.w	r0, r0, #7
 8009058:	1ac2      	subs	r2, r0, r3
 800905a:	bf1c      	itt	ne
 800905c:	1a1b      	subne	r3, r3, r0
 800905e:	50a3      	strne	r3, [r4, r2]
 8009060:	e7af      	b.n	8008fc2 <_malloc_r+0x22>
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	42a3      	cmp	r3, r4
 8009066:	bf0c      	ite	eq
 8009068:	f8c8 2000 	streq.w	r2, [r8]
 800906c:	605a      	strne	r2, [r3, #4]
 800906e:	e7eb      	b.n	8009048 <_malloc_r+0xa8>
 8009070:	4623      	mov	r3, r4
 8009072:	6864      	ldr	r4, [r4, #4]
 8009074:	e7ae      	b.n	8008fd4 <_malloc_r+0x34>
 8009076:	463c      	mov	r4, r7
 8009078:	687f      	ldr	r7, [r7, #4]
 800907a:	e7b6      	b.n	8008fea <_malloc_r+0x4a>
 800907c:	461a      	mov	r2, r3
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	42a3      	cmp	r3, r4
 8009082:	d1fb      	bne.n	800907c <_malloc_r+0xdc>
 8009084:	2300      	movs	r3, #0
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e7de      	b.n	8009048 <_malloc_r+0xa8>
 800908a:	230c      	movs	r3, #12
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	4630      	mov	r0, r6
 8009090:	f000 f80c 	bl	80090ac <__malloc_unlock>
 8009094:	e794      	b.n	8008fc0 <_malloc_r+0x20>
 8009096:	6005      	str	r5, [r0, #0]
 8009098:	e7d6      	b.n	8009048 <_malloc_r+0xa8>
 800909a:	bf00      	nop
 800909c:	20000954 	.word	0x20000954

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	@ (80090a8 <__malloc_lock+0x8>)
 80090a2:	f000 b84b 	b.w	800913c <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000a94 	.word	0x20000a94

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f000 b846 	b.w	800913e <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20000a94 	.word	0x20000a94

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <_sbrk_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d06      	ldr	r5, [pc, #24]	@ (80090e4 <_sbrk_r+0x1c>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	f7f8 f91e 	bl	8001314 <_sbrk>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_sbrk_r+0x1a>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_sbrk_r+0x1a>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20000a90 	.word	0x20000a90

080090e8 <__errno>:
 80090e8:	4b01      	ldr	r3, [pc, #4]	@ (80090f0 <__errno+0x8>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	2000002c 	.word	0x2000002c

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	@ (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	@ (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	@ (8009138 <__libc_init_array+0x44>)
 8009108:	f000 f864 	bl	80091d4 <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	08009210 	.word	0x08009210
 8009130:	08009210 	.word	0x08009210
 8009134:	08009210 	.word	0x08009210
 8009138:	08009214 	.word	0x08009214

0800913c <__retarget_lock_acquire_recursive>:
 800913c:	4770      	bx	lr

0800913e <__retarget_lock_release_recursive>:
 800913e:	4770      	bx	lr

08009140 <_free_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	d041      	beq.n	80091cc <_free_r+0x8c>
 8009148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914c:	1f0c      	subs	r4, r1, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	18e4      	addlt	r4, r4, r3
 8009154:	f7ff ffa4 	bl	80090a0 <__malloc_lock>
 8009158:	4a1d      	ldr	r2, [pc, #116]	@ (80091d0 <_free_r+0x90>)
 800915a:	6813      	ldr	r3, [r2, #0]
 800915c:	b933      	cbnz	r3, 800916c <_free_r+0x2c>
 800915e:	6063      	str	r3, [r4, #4]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009168:	f7ff bfa0 	b.w	80090ac <__malloc_unlock>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d908      	bls.n	8009182 <_free_r+0x42>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	1821      	adds	r1, r4, r0
 8009174:	428b      	cmp	r3, r1
 8009176:	bf01      	itttt	eq
 8009178:	6819      	ldreq	r1, [r3, #0]
 800917a:	685b      	ldreq	r3, [r3, #4]
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	e7ed      	b.n	800915e <_free_r+0x1e>
 8009182:	461a      	mov	r2, r3
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <_free_r+0x4c>
 8009188:	42a3      	cmp	r3, r4
 800918a:	d9fa      	bls.n	8009182 <_free_r+0x42>
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	1850      	adds	r0, r2, r1
 8009190:	42a0      	cmp	r0, r4
 8009192:	d10b      	bne.n	80091ac <_free_r+0x6c>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	4401      	add	r1, r0
 8009198:	1850      	adds	r0, r2, r1
 800919a:	4283      	cmp	r3, r0
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	d1e0      	bne.n	8009162 <_free_r+0x22>
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	4408      	add	r0, r1
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	e7da      	b.n	8009162 <_free_r+0x22>
 80091ac:	d902      	bls.n	80091b4 <_free_r+0x74>
 80091ae:	230c      	movs	r3, #12
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	e7d6      	b.n	8009162 <_free_r+0x22>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	1821      	adds	r1, r4, r0
 80091b8:	428b      	cmp	r3, r1
 80091ba:	bf04      	itt	eq
 80091bc:	6819      	ldreq	r1, [r3, #0]
 80091be:	685b      	ldreq	r3, [r3, #4]
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	bf04      	itt	eq
 80091c4:	1809      	addeq	r1, r1, r0
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	6054      	str	r4, [r2, #4]
 80091ca:	e7ca      	b.n	8009162 <_free_r+0x22>
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000954 	.word	0x20000954

080091d4 <_init>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr

080091e0 <_fini>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr
